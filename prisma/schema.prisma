datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator nestgraphql {
  provider                              = "node node_modules/prisma-nestjs-graphql"
  output                                = "../src/dtos"
  fields_Validator_from                 = "class-validator"
  fields_Validator_input                = true
  requireSingleFieldsInWhereUniqueInput = true
  emitSingle                            = true
  emitCompiled                          = false
  purgeOutput                           = true
  noTypeId                              = true
  previewFeatures                       = ["relationJoins"]
  engineType = "binary"
}

model Company {
  id           Int         @id @default(autoincrement())
  name         String
  address      String
  phone        String
  account Account?
  warehouses   Warehouse[]
  staffes      Staff[]
  invoices     Invoice[]
}

model Staff {
  id         Int      @id @default(autoincrement())
  name       String
  position   String
  education  String
  salary     Float
  hire_date  DateTime
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id], onDelete: NoAction)
}

model Warehouse {
  id         Int         @id @default(autoincrement())
  address    String
  company_id Int
  company    Company     @relation(fields: [company_id], references: [id], onDelete: NoAction)
  transports Transport[]
  order      Order[]
}

model Transport {
  id                  Int       @id @default(autoincrement())
  vehicle_number      String
  vehicle_brand       String
  load_capacity       Int
  year_of_manufacture Int
  owner_name          String
  warehouse_id        Int
  warehouse           Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: NoAction)
}

model Invoice {
  id               Int     @id @default(autoincrement())
  total_amount     Int
  product_id       Int
  product          Product @relation(fields: [product_id], references: [id], onDelete: NoAction)
  order_id         Int
  order            Order   @relation(fields: [order_id], references: [id], onDelete: NoAction)
  company_id       Int
  company          Company @relation(fields: [company_id], references: [id], onDelete: NoAction)
  transport_date      DateTime
}

model Product {
  id                   Int       @id @default(autoincrement())
  product_name         String
  unit_of_measurement  String
  grade                String
  price                Decimal  @db.Decimal(10, 2)
  manufacturer         String
  manufacturer_address String
  product_quantity     Int
  supplier_id          Int
  supplier             Supplier  @relation(fields: [supplier_id], references: [id], onDelete: NoAction)
  invoices             Invoice[]
  orders                Order[]
}

model Supplier {
  id       Int       @id @default(autoincrement())
  name     String
  address  String
  account  Account?
  products Product[]
}

model Client {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  orders  Order[]
  account Account?
}

model Account {
  id             Int      @id @default(autoincrement())
  bank_name      String
  account_number String
  balance        String
  date           DateTime
  has_credit     Boolean
  credit_amount  Float
  client_id      Int?      @unique
  client         Client?   @relation(fields: [client_id], references: [id], onDelete: NoAction)
  supplier_id      Int?      @unique
  supplier         Supplier?   @relation(fields: [supplier_id], references: [id], onDelete: NoAction)
  company_id      Int?      @unique
  company         Company?   @relation(fields: [company_id], references: [id], onDelete: NoAction)
}

model Order {
  id            Int         @id @default(autoincrement())
  order_date    DateTime
  client_id     Int
  client        Client      @relation(fields: [client_id], references: [id], onDelete: NoAction)
  product_id    Int
  product_count Int
  product       Product     @relation(fields: [product_id], references: [id], onDelete: NoAction)
  invoices       Invoice[]
  warehouse     Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: NoAction)
  warehouse_id Int
}

# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountAvgAggregate {
  id: Float
  credit_amount: Float
  client_id: Float
  supplier_id: Float
  company_id: Float
}

type AccountCountAggregate {
  id: Int!
  bank_name: Int!
  account_number: Int!
  balance: Int!
  date: Int!
  has_credit: Int!
  credit_amount: Int!
  client_id: Int!
  supplier_id: Int!
  company_id: Int!
  _all: Int!
}

type AccountGroupBy {
  id: Int!
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  client_id: Int
  supplier_id: Int
  company_id: Int
  _count: AccountCountAggregate
  _avg: AccountAvgAggregate
  _sum: AccountSumAggregate
  _min: AccountMinAggregate
  _max: AccountMaxAggregate
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AccountMaxAggregate {
  id: Int
  bank_name: String
  account_number: String
  balance: String
  date: DateTime
  has_credit: Boolean
  credit_amount: Float
  client_id: Int
  supplier_id: Int
  company_id: Int
}

type AccountMinAggregate {
  id: Int
  bank_name: String
  account_number: String
  balance: String
  date: DateTime
  has_credit: Boolean
  credit_amount: Float
  client_id: Int
  supplier_id: Int
  company_id: Int
}

type AccountSumAggregate {
  id: Int
  credit_amount: Float
  client_id: Int
  supplier_id: Int
  company_id: Int
}

type Account {
  id: Int!
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  client_id: Int
  supplier_id: Int
  company_id: Int
  client: Client
  supplier: Supplier
  company: Company
}

type AggregateAccount {
  _count: AccountCountAggregate
  _avg: AccountAvgAggregate
  _sum: AccountSumAggregate
  _min: AccountMinAggregate
  _max: AccountMaxAggregate
}

type AggregateClient {
  _count: ClientCountAggregate
  _avg: ClientAvgAggregate
  _sum: ClientSumAggregate
  _min: ClientMinAggregate
  _max: ClientMaxAggregate
}

type ClientAvgAggregate {
  id: Float
}

type ClientCountAggregate {
  id: Int!
  name: Int!
  address: Int!
  _all: Int!
}

type ClientCount {
  orders: Int!
}

type ClientGroupBy {
  id: Int!
  name: String!
  address: String!
  _count: ClientCountAggregate
  _avg: ClientAvgAggregate
  _sum: ClientSumAggregate
  _min: ClientMinAggregate
  _max: ClientMaxAggregate
}

type ClientMaxAggregate {
  id: Int
  name: String
  address: String
}

type ClientMinAggregate {
  id: Int
  name: String
  address: String
}

type ClientSumAggregate {
  id: Int
}

type Client {
  id: Int!
  name: String!
  address: String!
  orders: [Order!]
  account: Account
  _count: ClientCount!
}

type AggregateCompany {
  _count: CompanyCountAggregate
  _avg: CompanyAvgAggregate
  _sum: CompanySumAggregate
  _min: CompanyMinAggregate
  _max: CompanyMaxAggregate
}

type CompanyAvgAggregate {
  id: Float
}

type CompanyCountAggregate {
  id: Int!
  name: Int!
  address: Int!
  phone: Int!
  _all: Int!
}

type CompanyCount {
  warehouses: Int!
  staffes: Int!
  invoices: Int!
}

type CompanyGroupBy {
  id: Int!
  name: String!
  address: String!
  phone: String!
  _count: CompanyCountAggregate
  _avg: CompanyAvgAggregate
  _sum: CompanySumAggregate
  _min: CompanyMinAggregate
  _max: CompanyMaxAggregate
}

type CompanyMaxAggregate {
  id: Int
  name: String
  address: String
  phone: String
}

type CompanyMinAggregate {
  id: Int
  name: String
  address: String
  phone: String
}

type CompanySumAggregate {
  id: Int
}

type Company {
  id: Int!
  name: String!
  address: String!
  phone: String!
  account: Account
  warehouses: [Warehouse!]
  staffes: [Staff!]
  invoices: [Invoice!]
  _count: CompanyCount!
}

type AggregateInvoice {
  _count: InvoiceCountAggregate
  _avg: InvoiceAvgAggregate
  _sum: InvoiceSumAggregate
  _min: InvoiceMinAggregate
  _max: InvoiceMaxAggregate
}

type InvoiceAvgAggregate {
  id: Float
  total_amount: Float
  product_id: Float
  order_id: Float
  company_id: Float
}

type InvoiceCountAggregate {
  id: Int!
  total_amount: Int!
  product_id: Int!
  order_id: Int!
  company_id: Int!
  transport_date: Int!
  _all: Int!
}

type InvoiceGroupBy {
  id: Int!
  total_amount: Int!
  product_id: Int!
  order_id: Int!
  company_id: Int!
  transport_date: DateTime!
  _count: InvoiceCountAggregate
  _avg: InvoiceAvgAggregate
  _sum: InvoiceSumAggregate
  _min: InvoiceMinAggregate
  _max: InvoiceMaxAggregate
}

type InvoiceMaxAggregate {
  id: Int
  total_amount: Int
  product_id: Int
  order_id: Int
  company_id: Int
  transport_date: DateTime
}

type InvoiceMinAggregate {
  id: Int
  total_amount: Int
  product_id: Int
  order_id: Int
  company_id: Int
  transport_date: DateTime
}

type InvoiceSumAggregate {
  id: Int
  total_amount: Int
  product_id: Int
  order_id: Int
  company_id: Int
}

type Invoice {
  id: Int!
  total_amount: Int!
  product_id: Int!
  order_id: Int!
  company_id: Int!
  transport_date: DateTime!
  product: Product!
  order: Order!
  company: Company!
}

type AggregateOrder {
  _count: OrderCountAggregate
  _avg: OrderAvgAggregate
  _sum: OrderSumAggregate
  _min: OrderMinAggregate
  _max: OrderMaxAggregate
}

type OrderAvgAggregate {
  id: Float
  client_id: Float
  product_id: Float
  product_count: Float
  warehouse_id: Float
}

type OrderCountAggregate {
  id: Int!
  order_date: Int!
  client_id: Int!
  product_id: Int!
  product_count: Int!
  warehouse_id: Int!
  _all: Int!
}

type OrderCount {
  invoices: Int!
}

type OrderGroupBy {
  id: Int!
  order_date: DateTime!
  client_id: Int!
  product_id: Int!
  product_count: Int!
  warehouse_id: Int!
  _count: OrderCountAggregate
  _avg: OrderAvgAggregate
  _sum: OrderSumAggregate
  _min: OrderMinAggregate
  _max: OrderMaxAggregate
}

type OrderMaxAggregate {
  id: Int
  order_date: DateTime
  client_id: Int
  product_id: Int
  product_count: Int
  warehouse_id: Int
}

type OrderMinAggregate {
  id: Int
  order_date: DateTime
  client_id: Int
  product_id: Int
  product_count: Int
  warehouse_id: Int
}

type OrderSumAggregate {
  id: Int
  client_id: Int
  product_id: Int
  product_count: Int
  warehouse_id: Int
}

type Order {
  id: Int!
  order_date: DateTime!
  client_id: Int!
  product_id: Int!
  product_count: Int!
  warehouse_id: Int!
  client: Client!
  product: Product!
  invoices: [Invoice!]
  warehouse: Warehouse!
  _count: OrderCount!
}

type AffectedRows {
  count: Int!
}

type AggregateProduct {
  _count: ProductCountAggregate
  _avg: ProductAvgAggregate
  _sum: ProductSumAggregate
  _min: ProductMinAggregate
  _max: ProductMaxAggregate
}

type ProductAvgAggregate {
  id: Float
  price: Decimal
  product_quantity: Float
  supplier_id: Float
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type ProductCountAggregate {
  id: Int!
  product_name: Int!
  unit_of_measurement: Int!
  grade: Int!
  price: Int!
  manufacturer: Int!
  manufacturer_address: Int!
  product_quantity: Int!
  supplier_id: Int!
  _all: Int!
}

type ProductCount {
  invoices: Int!
  orders: Int!
}

type ProductGroupBy {
  id: Int!
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  supplier_id: Int!
  _count: ProductCountAggregate
  _avg: ProductAvgAggregate
  _sum: ProductSumAggregate
  _min: ProductMinAggregate
  _max: ProductMaxAggregate
}

type ProductMaxAggregate {
  id: Int
  product_name: String
  unit_of_measurement: String
  grade: String
  price: Decimal
  manufacturer: String
  manufacturer_address: String
  product_quantity: Int
  supplier_id: Int
}

type ProductMinAggregate {
  id: Int
  product_name: String
  unit_of_measurement: String
  grade: String
  price: Decimal
  manufacturer: String
  manufacturer_address: String
  product_quantity: Int
  supplier_id: Int
}

type ProductSumAggregate {
  id: Int
  price: Decimal
  product_quantity: Int
  supplier_id: Int
}

type Product {
  id: Int!
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  supplier_id: Int!
  supplier: Supplier!
  invoices: [Invoice!]
  orders: [Order!]
  _count: ProductCount!
}

type AggregateStaff {
  _count: StaffCountAggregate
  _avg: StaffAvgAggregate
  _sum: StaffSumAggregate
  _min: StaffMinAggregate
  _max: StaffMaxAggregate
}

type StaffAvgAggregate {
  id: Float
  salary: Float
  company_id: Float
}

type StaffCountAggregate {
  id: Int!
  name: Int!
  position: Int!
  education: Int!
  salary: Int!
  hire_date: Int!
  company_id: Int!
  _all: Int!
}

type StaffGroupBy {
  id: Int!
  name: String!
  position: String!
  education: String!
  salary: Float!
  hire_date: DateTime!
  company_id: Int!
  _count: StaffCountAggregate
  _avg: StaffAvgAggregate
  _sum: StaffSumAggregate
  _min: StaffMinAggregate
  _max: StaffMaxAggregate
}

type StaffMaxAggregate {
  id: Int
  name: String
  position: String
  education: String
  salary: Float
  hire_date: DateTime
  company_id: Int
}

type StaffMinAggregate {
  id: Int
  name: String
  position: String
  education: String
  salary: Float
  hire_date: DateTime
  company_id: Int
}

type StaffSumAggregate {
  id: Int
  salary: Float
  company_id: Int
}

type Staff {
  id: Int!
  name: String!
  position: String!
  education: String!
  salary: Float!
  hire_date: DateTime!
  company_id: Int!
  company: Company!
}

type AggregateSupplier {
  _count: SupplierCountAggregate
  _avg: SupplierAvgAggregate
  _sum: SupplierSumAggregate
  _min: SupplierMinAggregate
  _max: SupplierMaxAggregate
}

type SupplierAvgAggregate {
  id: Float
}

type SupplierCountAggregate {
  id: Int!
  name: Int!
  address: Int!
  _all: Int!
}

type SupplierCount {
  products: Int!
}

type SupplierGroupBy {
  id: Int!
  name: String!
  address: String!
  _count: SupplierCountAggregate
  _avg: SupplierAvgAggregate
  _sum: SupplierSumAggregate
  _min: SupplierMinAggregate
  _max: SupplierMaxAggregate
}

type SupplierMaxAggregate {
  id: Int
  name: String
  address: String
}

type SupplierMinAggregate {
  id: Int
  name: String
  address: String
}

type SupplierSumAggregate {
  id: Int
}

type Supplier {
  id: Int!
  name: String!
  address: String!
  account: Account
  products: [Product!]
  _count: SupplierCount!
}

type AggregateTransport {
  _count: TransportCountAggregate
  _avg: TransportAvgAggregate
  _sum: TransportSumAggregate
  _min: TransportMinAggregate
  _max: TransportMaxAggregate
}

type TransportAvgAggregate {
  id: Float
  load_capacity: Float
  year_of_manufacture: Float
  warehouse_id: Float
}

type TransportCountAggregate {
  id: Int!
  vehicle_number: Int!
  vehicle_brand: Int!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: Int!
  warehouse_id: Int!
  _all: Int!
}

type TransportGroupBy {
  id: Int!
  vehicle_number: String!
  vehicle_brand: String!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: String!
  warehouse_id: Int!
  _count: TransportCountAggregate
  _avg: TransportAvgAggregate
  _sum: TransportSumAggregate
  _min: TransportMinAggregate
  _max: TransportMaxAggregate
}

type TransportMaxAggregate {
  id: Int
  vehicle_number: String
  vehicle_brand: String
  load_capacity: Int
  year_of_manufacture: Int
  owner_name: String
  warehouse_id: Int
}

type TransportMinAggregate {
  id: Int
  vehicle_number: String
  vehicle_brand: String
  load_capacity: Int
  year_of_manufacture: Int
  owner_name: String
  warehouse_id: Int
}

type TransportSumAggregate {
  id: Int
  load_capacity: Int
  year_of_manufacture: Int
  warehouse_id: Int
}

type Transport {
  id: Int!
  vehicle_number: String!
  vehicle_brand: String!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: String!
  warehouse_id: Int!
  warehouse: Warehouse!
}

type AggregateWarehouse {
  _count: WarehouseCountAggregate
  _avg: WarehouseAvgAggregate
  _sum: WarehouseSumAggregate
  _min: WarehouseMinAggregate
  _max: WarehouseMaxAggregate
}

type WarehouseAvgAggregate {
  id: Float
  company_id: Float
}

type WarehouseCountAggregate {
  id: Int!
  address: Int!
  company_id: Int!
  _all: Int!
}

type WarehouseCount {
  transports: Int!
  order: Int!
}

type WarehouseGroupBy {
  id: Int!
  address: String!
  company_id: Int!
  _count: WarehouseCountAggregate
  _avg: WarehouseAvgAggregate
  _sum: WarehouseSumAggregate
  _min: WarehouseMinAggregate
  _max: WarehouseMaxAggregate
}

type WarehouseMaxAggregate {
  id: Int
  address: String
  company_id: Int
}

type WarehouseMinAggregate {
  id: Int
  address: String
  company_id: Int
}

type WarehouseSumAggregate {
  id: Int
  company_id: Int
}

type Warehouse {
  id: Int!
  address: String!
  company_id: Int!
  company: Company!
  transports: [Transport!]
  order: [Order!]
  _count: WarehouseCount!
}

type Query {
  findFirstSupplier(where: SupplierWhereInput, orderBy: [SupplierOrderByWithRelationInput!], cursor: SupplierWhereUniqueInput, take: Int, skip: Int, distinct: [SupplierScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Supplier!
  findUniqueSupplier(where: SupplierWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Supplier!
  listsSupplier(where: SupplierWhereInput, orderBy: [SupplierOrderByWithRelationInput!], cursor: SupplierWhereUniqueInput, take: Int, skip: Int, distinct: [SupplierScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Supplier!]!
  groupBySupplier(where: SupplierWhereInput, orderBy: [SupplierOrderByWithAggregationInput!], by: [SupplierScalarFieldEnum!]!, having: SupplierScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: SupplierCountAggregateInput, _avg: SupplierAvgAggregateInput, _sum: SupplierSumAggregateInput, _min: SupplierMinAggregateInput, _max: SupplierMaxAggregateInput): [SupplierGroupBy!]!
  aggregateSupplier(where: SupplierWhereInput, orderBy: [SupplierOrderByWithRelationInput!], cursor: SupplierWhereUniqueInput, take: Int, skip: Int, _count: SupplierCountAggregateInput, _avg: SupplierAvgAggregateInput, _sum: SupplierSumAggregateInput, _min: SupplierMinAggregateInput, _max: SupplierMaxAggregateInput): AggregateSupplier!
  findFirstAccount(where: AccountWhereInput, orderBy: [AccountOrderByWithRelationInput!], cursor: AccountWhereUniqueInput, take: Int, skip: Int, distinct: [AccountScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Account!
  findUniqueAccount(where: AccountWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Account!
  listsAccount(where: AccountWhereInput, orderBy: [AccountOrderByWithRelationInput!], cursor: AccountWhereUniqueInput, take: Int, skip: Int, distinct: [AccountScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Account!]!
  groupByAccount(where: AccountWhereInput, orderBy: [AccountOrderByWithAggregationInput!], by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: AccountCountAggregateInput, _avg: AccountAvgAggregateInput, _sum: AccountSumAggregateInput, _min: AccountMinAggregateInput, _max: AccountMaxAggregateInput): [AccountGroupBy!]!
  aggregateAccount(where: AccountWhereInput, orderBy: [AccountOrderByWithRelationInput!], cursor: AccountWhereUniqueInput, take: Int, skip: Int, _count: AccountCountAggregateInput, _avg: AccountAvgAggregateInput, _sum: AccountSumAggregateInput, _min: AccountMinAggregateInput, _max: AccountMaxAggregateInput): AggregateAccount!
  findFirstProduct(where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Int, skip: Int, distinct: [ProductScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Product!
  findUniqueProduct(where: ProductWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Product!
  listsProduct(where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Int, skip: Int, distinct: [ProductScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Product!]!
  groupByProduct(where: ProductWhereInput, orderBy: [ProductOrderByWithAggregationInput!], by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: ProductCountAggregateInput, _avg: ProductAvgAggregateInput, _sum: ProductSumAggregateInput, _min: ProductMinAggregateInput, _max: ProductMaxAggregateInput): [ProductGroupBy!]!
  aggregateProduct(where: ProductWhereInput, orderBy: [ProductOrderByWithRelationInput!], cursor: ProductWhereUniqueInput, take: Int, skip: Int, _count: ProductCountAggregateInput, _avg: ProductAvgAggregateInput, _sum: ProductSumAggregateInput, _min: ProductMinAggregateInput, _max: ProductMaxAggregateInput): AggregateProduct!
  findFirstClient(where: ClientWhereInput, orderBy: [ClientOrderByWithRelationInput!], cursor: ClientWhereUniqueInput, take: Int, skip: Int, distinct: [ClientScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Client!
  findUniqueClient(where: ClientWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Client!
  listsClient(where: ClientWhereInput, orderBy: [ClientOrderByWithRelationInput!], cursor: ClientWhereUniqueInput, take: Int, skip: Int, distinct: [ClientScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Client!]!
  groupByClient(where: ClientWhereInput, orderBy: [ClientOrderByWithAggregationInput!], by: [ClientScalarFieldEnum!]!, having: ClientScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: ClientCountAggregateInput, _avg: ClientAvgAggregateInput, _sum: ClientSumAggregateInput, _min: ClientMinAggregateInput, _max: ClientMaxAggregateInput): [ClientGroupBy!]!
  aggregateClient(where: ClientWhereInput, orderBy: [ClientOrderByWithRelationInput!], cursor: ClientWhereUniqueInput, take: Int, skip: Int, _count: ClientCountAggregateInput, _avg: ClientAvgAggregateInput, _sum: ClientSumAggregateInput, _min: ClientMinAggregateInput, _max: ClientMaxAggregateInput): AggregateClient!
  findFirstCompany(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Company!
  findUniqueCompany(where: CompanyWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Company!
  listsCompany(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Company!]!
  groupByCompany(where: CompanyWhereInput, orderBy: [CompanyOrderByWithAggregationInput!], by: [CompanyScalarFieldEnum!]!, having: CompanyScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: CompanyCountAggregateInput, _avg: CompanyAvgAggregateInput, _sum: CompanySumAggregateInput, _min: CompanyMinAggregateInput, _max: CompanyMaxAggregateInput): [CompanyGroupBy!]!
  aggregateCompany(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, _count: CompanyCountAggregateInput, _avg: CompanyAvgAggregateInput, _sum: CompanySumAggregateInput, _min: CompanyMinAggregateInput, _max: CompanyMaxAggregateInput): AggregateCompany!
  findFirstOrder(where: OrderWhereInput, orderBy: [OrderOrderByWithRelationInput!], cursor: OrderWhereUniqueInput, take: Int, skip: Int, distinct: [OrderScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Order!
  findUniqueOrder(where: OrderWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Order!
  listsOrder(where: OrderWhereInput, orderBy: [OrderOrderByWithRelationInput!], cursor: OrderWhereUniqueInput, take: Int, skip: Int, distinct: [OrderScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Order!]!
  groupByOrder(where: OrderWhereInput, orderBy: [OrderOrderByWithAggregationInput!], by: [OrderScalarFieldEnum!]!, having: OrderScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: OrderCountAggregateInput, _avg: OrderAvgAggregateInput, _sum: OrderSumAggregateInput, _min: OrderMinAggregateInput, _max: OrderMaxAggregateInput): [OrderGroupBy!]!
  aggregateOrder(where: OrderWhereInput, orderBy: [OrderOrderByWithRelationInput!], cursor: OrderWhereUniqueInput, take: Int, skip: Int, _count: OrderCountAggregateInput, _avg: OrderAvgAggregateInput, _sum: OrderSumAggregateInput, _min: OrderMinAggregateInput, _max: OrderMaxAggregateInput): AggregateOrder!
  findFirstInvoice(where: InvoiceWhereInput, orderBy: [InvoiceOrderByWithRelationInput!], cursor: InvoiceWhereUniqueInput, take: Int, skip: Int, distinct: [InvoiceScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Invoice!
  findUniqueInvoice(where: InvoiceWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Invoice!
  listsInvoice(where: InvoiceWhereInput, orderBy: [InvoiceOrderByWithRelationInput!], cursor: InvoiceWhereUniqueInput, take: Int, skip: Int, distinct: [InvoiceScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Invoice!]!
  groupByInvoice(where: InvoiceWhereInput, orderBy: [InvoiceOrderByWithAggregationInput!], by: [InvoiceScalarFieldEnum!]!, having: InvoiceScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: InvoiceCountAggregateInput, _avg: InvoiceAvgAggregateInput, _sum: InvoiceSumAggregateInput, _min: InvoiceMinAggregateInput, _max: InvoiceMaxAggregateInput): [InvoiceGroupBy!]!
  aggregateInvoice(where: InvoiceWhereInput, orderBy: [InvoiceOrderByWithRelationInput!], cursor: InvoiceWhereUniqueInput, take: Int, skip: Int, _count: InvoiceCountAggregateInput, _avg: InvoiceAvgAggregateInput, _sum: InvoiceSumAggregateInput, _min: InvoiceMinAggregateInput, _max: InvoiceMaxAggregateInput): AggregateInvoice!
  findFirstWarehouse(where: WarehouseWhereInput, orderBy: [WarehouseOrderByWithRelationInput!], cursor: WarehouseWhereUniqueInput, take: Int, skip: Int, distinct: [WarehouseScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Warehouse!
  findUniqueWarehouse(where: WarehouseWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Warehouse!
  listsWarehouse(where: WarehouseWhereInput, orderBy: [WarehouseOrderByWithRelationInput!], cursor: WarehouseWhereUniqueInput, take: Int, skip: Int, distinct: [WarehouseScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Warehouse!]!
  groupByWarehouse(where: WarehouseWhereInput, orderBy: [WarehouseOrderByWithAggregationInput!], by: [WarehouseScalarFieldEnum!]!, having: WarehouseScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: WarehouseCountAggregateInput, _avg: WarehouseAvgAggregateInput, _sum: WarehouseSumAggregateInput, _min: WarehouseMinAggregateInput, _max: WarehouseMaxAggregateInput): [WarehouseGroupBy!]!
  aggregateWarehouse(where: WarehouseWhereInput, orderBy: [WarehouseOrderByWithRelationInput!], cursor: WarehouseWhereUniqueInput, take: Int, skip: Int, _count: WarehouseCountAggregateInput, _avg: WarehouseAvgAggregateInput, _sum: WarehouseSumAggregateInput, _min: WarehouseMinAggregateInput, _max: WarehouseMaxAggregateInput): AggregateWarehouse!
  findFirstStaff(where: StaffWhereInput, orderBy: [StaffOrderByWithRelationInput!], cursor: StaffWhereUniqueInput, take: Int, skip: Int, distinct: [StaffScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Staff!
  findUniqueStaff(where: StaffWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Staff!
  listsStaff(where: StaffWhereInput, orderBy: [StaffOrderByWithRelationInput!], cursor: StaffWhereUniqueInput, take: Int, skip: Int, distinct: [StaffScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Staff!]!
  groupByStaff(where: StaffWhereInput, orderBy: [StaffOrderByWithAggregationInput!], by: [StaffScalarFieldEnum!]!, having: StaffScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: StaffCountAggregateInput, _avg: StaffAvgAggregateInput, _sum: StaffSumAggregateInput, _min: StaffMinAggregateInput, _max: StaffMaxAggregateInput): [StaffGroupBy!]!
  aggregateStaff(where: StaffWhereInput, orderBy: [StaffOrderByWithRelationInput!], cursor: StaffWhereUniqueInput, take: Int, skip: Int, _count: StaffCountAggregateInput, _avg: StaffAvgAggregateInput, _sum: StaffSumAggregateInput, _min: StaffMinAggregateInput, _max: StaffMaxAggregateInput): AggregateStaff!
  findFirstTransport(where: TransportWhereInput, orderBy: [TransportOrderByWithRelationInput!], cursor: TransportWhereUniqueInput, take: Int, skip: Int, distinct: [TransportScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): Transport!
  findUniqueTransport(where: TransportWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Transport!
  listsTransport(where: TransportWhereInput, orderBy: [TransportOrderByWithRelationInput!], cursor: TransportWhereUniqueInput, take: Int, skip: Int, distinct: [TransportScalarFieldEnum!], relationLoadStrategy: RelationLoadStrategy): [Transport!]!
  groupByTransport(where: TransportWhereInput, orderBy: [TransportOrderByWithAggregationInput!], by: [TransportScalarFieldEnum!]!, having: TransportScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: TransportCountAggregateInput, _avg: TransportAvgAggregateInput, _sum: TransportSumAggregateInput, _min: TransportMinAggregateInput, _max: TransportMaxAggregateInput): [TransportGroupBy!]!
  aggregateTransport(where: TransportWhereInput, orderBy: [TransportOrderByWithRelationInput!], cursor: TransportWhereUniqueInput, take: Int, skip: Int, _count: TransportCountAggregateInput, _avg: TransportAvgAggregateInput, _sum: TransportSumAggregateInput, _min: TransportMinAggregateInput, _max: TransportMaxAggregateInput): AggregateTransport!
}

input SupplierWhereInput {
  AND: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  NOT: [SupplierWhereInput!]
  id: IntFilter
  name: StringFilter
  address: StringFilter
  account: AccountNullableRelationFilter
  products: ProductListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AccountNullableRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  bank_name: StringFilter
  account_number: StringFilter
  balance: StringFilter
  date: DateTimeFilter
  has_credit: BoolFilter
  credit_amount: FloatFilter
  client_id: IntNullableFilter
  supplier_id: IntNullableFilter
  company_id: IntNullableFilter
  client: ClientNullableRelationFilter
  supplier: SupplierNullableRelationFilter
  company: CompanyNullableRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ClientNullableRelationFilter {
  is: ClientWhereInput
  isNot: ClientWhereInput
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IntFilter
  name: StringFilter
  address: StringFilter
  orders: OrderListRelationFilter
  account: AccountNullableRelationFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IntFilter
  order_date: DateTimeFilter
  client_id: IntFilter
  product_id: IntFilter
  product_count: IntFilter
  warehouse_id: IntFilter
  client: ClientRelationFilter
  product: ProductRelationFilter
  invoices: InvoiceListRelationFilter
  warehouse: WarehouseRelationFilter
}

input ClientRelationFilter {
  is: ClientWhereInput
  isNot: ClientWhereInput
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IntFilter
  product_name: StringFilter
  unit_of_measurement: StringFilter
  grade: StringFilter
  price: DecimalFilter
  manufacturer: StringFilter
  manufacturer_address: StringFilter
  product_quantity: IntFilter
  supplier_id: IntFilter
  supplier: SupplierRelationFilter
  invoices: InvoiceListRelationFilter
  orders: OrderListRelationFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input SupplierRelationFilter {
  is: SupplierWhereInput
  isNot: SupplierWhereInput
}

input InvoiceListRelationFilter {
  every: InvoiceWhereInput
  some: InvoiceWhereInput
  none: InvoiceWhereInput
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IntFilter
  total_amount: IntFilter
  product_id: IntFilter
  order_id: IntFilter
  company_id: IntFilter
  transport_date: DateTimeFilter
  product: ProductRelationFilter
  order: OrderRelationFilter
  company: CompanyRelationFilter
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IntFilter
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  account: AccountNullableRelationFilter
  warehouses: WarehouseListRelationFilter
  staffes: StaffListRelationFilter
  invoices: InvoiceListRelationFilter
}

input WarehouseListRelationFilter {
  every: WarehouseWhereInput
  some: WarehouseWhereInput
  none: WarehouseWhereInput
}

input WarehouseWhereInput {
  AND: [WarehouseWhereInput!]
  OR: [WarehouseWhereInput!]
  NOT: [WarehouseWhereInput!]
  id: IntFilter
  address: StringFilter
  company_id: IntFilter
  company: CompanyRelationFilter
  transports: TransportListRelationFilter
  order: OrderListRelationFilter
}

input TransportListRelationFilter {
  every: TransportWhereInput
  some: TransportWhereInput
  none: TransportWhereInput
}

input TransportWhereInput {
  AND: [TransportWhereInput!]
  OR: [TransportWhereInput!]
  NOT: [TransportWhereInput!]
  id: IntFilter
  vehicle_number: StringFilter
  vehicle_brand: StringFilter
  load_capacity: IntFilter
  year_of_manufacture: IntFilter
  owner_name: StringFilter
  warehouse_id: IntFilter
  warehouse: WarehouseRelationFilter
}

input WarehouseRelationFilter {
  is: WarehouseWhereInput
  isNot: WarehouseWhereInput
}

input StaffListRelationFilter {
  every: StaffWhereInput
  some: StaffWhereInput
  none: StaffWhereInput
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  NOT: [StaffWhereInput!]
  id: IntFilter
  name: StringFilter
  position: StringFilter
  education: StringFilter
  salary: FloatFilter
  hire_date: DateTimeFilter
  company_id: IntFilter
  company: CompanyRelationFilter
}

input SupplierNullableRelationFilter {
  is: SupplierWhereInput
  isNot: SupplierWhereInput
}

input CompanyNullableRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input ProductListRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input SupplierOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  account: AccountOrderByWithRelationInput
  products: ProductOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  bank_name: SortOrder
  account_number: SortOrder
  balance: SortOrder
  date: SortOrder
  has_credit: SortOrder
  credit_amount: SortOrder
  client_id: SortOrderInput
  supplier_id: SortOrderInput
  company_id: SortOrderInput
  client: ClientOrderByWithRelationInput
  supplier: SupplierOrderByWithRelationInput
  company: CompanyOrderByWithRelationInput
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input ClientOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  orders: OrderOrderByRelationAggregateInput
  account: AccountOrderByWithRelationInput
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
  account: AccountOrderByWithRelationInput
  warehouses: WarehouseOrderByRelationAggregateInput
  staffes: StaffOrderByRelationAggregateInput
  invoices: InvoiceOrderByRelationAggregateInput
}

input WarehouseOrderByRelationAggregateInput {
  _count: SortOrder
}

input StaffOrderByRelationAggregateInput {
  _count: SortOrder
}

input InvoiceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input SupplierWhereUniqueInput {
  id: Int
  AND: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  NOT: [SupplierWhereInput!]
  name: StringFilter
  address: StringFilter
  account: AccountNullableRelationFilter
  products: ProductListRelationFilter
}

enum SupplierScalarFieldEnum {
  id
  name
  address
}

enum RelationLoadStrategy {
  query
  join
}

input SupplierOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  _count: SupplierCountOrderByAggregateInput
  _avg: SupplierAvgOrderByAggregateInput
  _max: SupplierMaxOrderByAggregateInput
  _min: SupplierMinOrderByAggregateInput
  _sum: SupplierSumOrderByAggregateInput
}

input SupplierCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input SupplierAvgOrderByAggregateInput {
  id: SortOrder
}

input SupplierMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input SupplierMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input SupplierSumOrderByAggregateInput {
  id: SortOrder
}

input SupplierScalarWhereWithAggregatesInput {
  AND: [SupplierScalarWhereWithAggregatesInput!]
  OR: [SupplierScalarWhereWithAggregatesInput!]
  NOT: [SupplierScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  address: StringWithAggregatesFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input SupplierCountAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
  _all: Boolean
}

input SupplierAvgAggregateInput {
  id: Boolean
}

input SupplierSumAggregateInput {
  id: Boolean
}

input SupplierMinAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
}

input SupplierMaxAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
}

input AccountWhereUniqueInput {
  id: Int
  client_id: Int
  supplier_id: Int
  company_id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  bank_name: StringFilter
  account_number: StringFilter
  balance: StringFilter
  date: DateTimeFilter
  has_credit: BoolFilter
  credit_amount: FloatFilter
  client: ClientNullableRelationFilter
  supplier: SupplierNullableRelationFilter
  company: CompanyNullableRelationFilter
}

enum AccountScalarFieldEnum {
  id
  bank_name
  account_number
  balance
  date
  has_credit
  credit_amount
  client_id
  supplier_id
  company_id
}

input AccountOrderByWithAggregationInput {
  id: SortOrder
  bank_name: SortOrder
  account_number: SortOrder
  balance: SortOrder
  date: SortOrder
  has_credit: SortOrder
  credit_amount: SortOrder
  client_id: SortOrderInput
  supplier_id: SortOrderInput
  company_id: SortOrderInput
  _count: AccountCountOrderByAggregateInput
  _avg: AccountAvgOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
}

input AccountCountOrderByAggregateInput {
  id: SortOrder
  bank_name: SortOrder
  account_number: SortOrder
  balance: SortOrder
  date: SortOrder
  has_credit: SortOrder
  credit_amount: SortOrder
  client_id: SortOrder
  supplier_id: SortOrder
  company_id: SortOrder
}

input AccountAvgOrderByAggregateInput {
  id: SortOrder
  credit_amount: SortOrder
  client_id: SortOrder
  supplier_id: SortOrder
  company_id: SortOrder
}

input AccountMaxOrderByAggregateInput {
  id: SortOrder
  bank_name: SortOrder
  account_number: SortOrder
  balance: SortOrder
  date: SortOrder
  has_credit: SortOrder
  credit_amount: SortOrder
  client_id: SortOrder
  supplier_id: SortOrder
  company_id: SortOrder
}

input AccountMinOrderByAggregateInput {
  id: SortOrder
  bank_name: SortOrder
  account_number: SortOrder
  balance: SortOrder
  date: SortOrder
  has_credit: SortOrder
  credit_amount: SortOrder
  client_id: SortOrder
  supplier_id: SortOrder
  company_id: SortOrder
}

input AccountSumOrderByAggregateInput {
  id: SortOrder
  credit_amount: SortOrder
  client_id: SortOrder
  supplier_id: SortOrder
  company_id: SortOrder
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  bank_name: StringWithAggregatesFilter
  account_number: StringWithAggregatesFilter
  balance: StringWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  has_credit: BoolWithAggregatesFilter
  credit_amount: FloatWithAggregatesFilter
  client_id: IntNullableWithAggregatesFilter
  supplier_id: IntNullableWithAggregatesFilter
  company_id: IntNullableWithAggregatesFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input FloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedFloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input AccountCountAggregateInput {
  id: Boolean
  bank_name: Boolean
  account_number: Boolean
  balance: Boolean
  date: Boolean
  has_credit: Boolean
  credit_amount: Boolean
  client_id: Boolean
  supplier_id: Boolean
  company_id: Boolean
  _all: Boolean
}

input AccountAvgAggregateInput {
  id: Boolean
  credit_amount: Boolean
  client_id: Boolean
  supplier_id: Boolean
  company_id: Boolean
}

input AccountSumAggregateInput {
  id: Boolean
  credit_amount: Boolean
  client_id: Boolean
  supplier_id: Boolean
  company_id: Boolean
}

input AccountMinAggregateInput {
  id: Boolean
  bank_name: Boolean
  account_number: Boolean
  balance: Boolean
  date: Boolean
  has_credit: Boolean
  credit_amount: Boolean
  client_id: Boolean
  supplier_id: Boolean
  company_id: Boolean
}

input AccountMaxAggregateInput {
  id: Boolean
  bank_name: Boolean
  account_number: Boolean
  balance: Boolean
  date: Boolean
  has_credit: Boolean
  credit_amount: Boolean
  client_id: Boolean
  supplier_id: Boolean
  company_id: Boolean
}

input ProductOrderByWithRelationInput {
  id: SortOrder
  product_name: SortOrder
  unit_of_measurement: SortOrder
  grade: SortOrder
  price: SortOrder
  manufacturer: SortOrder
  manufacturer_address: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
  supplier: SupplierOrderByWithRelationInput
  invoices: InvoiceOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
}

input ProductWhereUniqueInput {
  id: Int
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  product_name: StringFilter
  unit_of_measurement: StringFilter
  grade: StringFilter
  price: DecimalFilter
  manufacturer: StringFilter
  manufacturer_address: StringFilter
  product_quantity: IntFilter
  supplier_id: IntFilter
  supplier: SupplierRelationFilter
  invoices: InvoiceListRelationFilter
  orders: OrderListRelationFilter
}

enum ProductScalarFieldEnum {
  id
  product_name
  unit_of_measurement
  grade
  price
  manufacturer
  manufacturer_address
  product_quantity
  supplier_id
}

input ProductOrderByWithAggregationInput {
  id: SortOrder
  product_name: SortOrder
  unit_of_measurement: SortOrder
  grade: SortOrder
  price: SortOrder
  manufacturer: SortOrder
  manufacturer_address: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
  _count: ProductCountOrderByAggregateInput
  _avg: ProductAvgOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
}

input ProductCountOrderByAggregateInput {
  id: SortOrder
  product_name: SortOrder
  unit_of_measurement: SortOrder
  grade: SortOrder
  price: SortOrder
  manufacturer: SortOrder
  manufacturer_address: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
}

input ProductAvgOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
}

input ProductMaxOrderByAggregateInput {
  id: SortOrder
  product_name: SortOrder
  unit_of_measurement: SortOrder
  grade: SortOrder
  price: SortOrder
  manufacturer: SortOrder
  manufacturer_address: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
}

input ProductMinOrderByAggregateInput {
  id: SortOrder
  product_name: SortOrder
  unit_of_measurement: SortOrder
  grade: SortOrder
  price: SortOrder
  manufacturer: SortOrder
  manufacturer_address: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
}

input ProductSumOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  product_quantity: SortOrder
  supplier_id: SortOrder
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  product_name: StringWithAggregatesFilter
  unit_of_measurement: StringWithAggregatesFilter
  grade: StringWithAggregatesFilter
  price: DecimalWithAggregatesFilter
  manufacturer: StringWithAggregatesFilter
  manufacturer_address: StringWithAggregatesFilter
  product_quantity: IntWithAggregatesFilter
  supplier_id: IntWithAggregatesFilter
}

input DecimalWithAggregatesFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedDecimalFilter
  _sum: NestedDecimalFilter
  _min: NestedDecimalFilter
  _max: NestedDecimalFilter
}

input NestedDecimalWithAggregatesFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedDecimalFilter
  _sum: NestedDecimalFilter
  _min: NestedDecimalFilter
  _max: NestedDecimalFilter
}

input ProductCountAggregateInput {
  id: Boolean
  product_name: Boolean
  unit_of_measurement: Boolean
  grade: Boolean
  price: Boolean
  manufacturer: Boolean
  manufacturer_address: Boolean
  product_quantity: Boolean
  supplier_id: Boolean
  _all: Boolean
}

input ProductAvgAggregateInput {
  id: Boolean
  price: Boolean
  product_quantity: Boolean
  supplier_id: Boolean
}

input ProductSumAggregateInput {
  id: Boolean
  price: Boolean
  product_quantity: Boolean
  supplier_id: Boolean
}

input ProductMinAggregateInput {
  id: Boolean
  product_name: Boolean
  unit_of_measurement: Boolean
  grade: Boolean
  price: Boolean
  manufacturer: Boolean
  manufacturer_address: Boolean
  product_quantity: Boolean
  supplier_id: Boolean
}

input ProductMaxAggregateInput {
  id: Boolean
  product_name: Boolean
  unit_of_measurement: Boolean
  grade: Boolean
  price: Boolean
  manufacturer: Boolean
  manufacturer_address: Boolean
  product_quantity: Boolean
  supplier_id: Boolean
}

input ClientWhereUniqueInput {
  id: Int
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  name: StringFilter
  address: StringFilter
  orders: OrderListRelationFilter
  account: AccountNullableRelationFilter
}

enum ClientScalarFieldEnum {
  id
  name
  address
}

input ClientOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  _count: ClientCountOrderByAggregateInput
  _avg: ClientAvgOrderByAggregateInput
  _max: ClientMaxOrderByAggregateInput
  _min: ClientMinOrderByAggregateInput
  _sum: ClientSumOrderByAggregateInput
}

input ClientCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input ClientAvgOrderByAggregateInput {
  id: SortOrder
}

input ClientMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input ClientMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
}

input ClientSumOrderByAggregateInput {
  id: SortOrder
}

input ClientScalarWhereWithAggregatesInput {
  AND: [ClientScalarWhereWithAggregatesInput!]
  OR: [ClientScalarWhereWithAggregatesInput!]
  NOT: [ClientScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  address: StringWithAggregatesFilter
}

input ClientCountAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
  _all: Boolean
}

input ClientAvgAggregateInput {
  id: Boolean
}

input ClientSumAggregateInput {
  id: Boolean
}

input ClientMinAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
}

input ClientMaxAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
}

input CompanyWhereUniqueInput {
  id: Int
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  account: AccountNullableRelationFilter
  warehouses: WarehouseListRelationFilter
  staffes: StaffListRelationFilter
  invoices: InvoiceListRelationFilter
}

enum CompanyScalarFieldEnum {
  id
  name
  address
  phone
}

input CompanyOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
  _count: CompanyCountOrderByAggregateInput
  _avg: CompanyAvgOrderByAggregateInput
  _max: CompanyMaxOrderByAggregateInput
  _min: CompanyMinOrderByAggregateInput
  _sum: CompanySumOrderByAggregateInput
}

input CompanyCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
}

input CompanyAvgOrderByAggregateInput {
  id: SortOrder
}

input CompanyMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
}

input CompanyMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
}

input CompanySumOrderByAggregateInput {
  id: SortOrder
}

input CompanyScalarWhereWithAggregatesInput {
  AND: [CompanyScalarWhereWithAggregatesInput!]
  OR: [CompanyScalarWhereWithAggregatesInput!]
  NOT: [CompanyScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  address: StringWithAggregatesFilter
  phone: StringWithAggregatesFilter
}

input CompanyCountAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
  phone: Boolean
  _all: Boolean
}

input CompanyAvgAggregateInput {
  id: Boolean
}

input CompanySumAggregateInput {
  id: Boolean
}

input CompanyMinAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
  phone: Boolean
}

input CompanyMaxAggregateInput {
  id: Boolean
  name: Boolean
  address: Boolean
  phone: Boolean
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  order_date: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
  client: ClientOrderByWithRelationInput
  product: ProductOrderByWithRelationInput
  invoices: InvoiceOrderByRelationAggregateInput
  warehouse: WarehouseOrderByWithRelationInput
}

input WarehouseOrderByWithRelationInput {
  id: SortOrder
  address: SortOrder
  company_id: SortOrder
  company: CompanyOrderByWithRelationInput
  transports: TransportOrderByRelationAggregateInput
  order: OrderOrderByRelationAggregateInput
}

input TransportOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderWhereUniqueInput {
  id: Int
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  order_date: DateTimeFilter
  client_id: IntFilter
  product_id: IntFilter
  product_count: IntFilter
  warehouse_id: IntFilter
  client: ClientRelationFilter
  product: ProductRelationFilter
  invoices: InvoiceListRelationFilter
  warehouse: WarehouseRelationFilter
}

enum OrderScalarFieldEnum {
  id
  order_date
  client_id
  product_id
  product_count
  warehouse_id
}

input OrderOrderByWithAggregationInput {
  id: SortOrder
  order_date: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
  _count: OrderCountOrderByAggregateInput
  _avg: OrderAvgOrderByAggregateInput
  _max: OrderMaxOrderByAggregateInput
  _min: OrderMinOrderByAggregateInput
  _sum: OrderSumOrderByAggregateInput
}

input OrderCountOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
}

input OrderAvgOrderByAggregateInput {
  id: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
}

input OrderMaxOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
}

input OrderMinOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
}

input OrderSumOrderByAggregateInput {
  id: SortOrder
  client_id: SortOrder
  product_id: SortOrder
  product_count: SortOrder
  warehouse_id: SortOrder
}

input OrderScalarWhereWithAggregatesInput {
  AND: [OrderScalarWhereWithAggregatesInput!]
  OR: [OrderScalarWhereWithAggregatesInput!]
  NOT: [OrderScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  order_date: DateTimeWithAggregatesFilter
  client_id: IntWithAggregatesFilter
  product_id: IntWithAggregatesFilter
  product_count: IntWithAggregatesFilter
  warehouse_id: IntWithAggregatesFilter
}

input OrderCountAggregateInput {
  id: Boolean
  order_date: Boolean
  client_id: Boolean
  product_id: Boolean
  product_count: Boolean
  warehouse_id: Boolean
  _all: Boolean
}

input OrderAvgAggregateInput {
  id: Boolean
  client_id: Boolean
  product_id: Boolean
  product_count: Boolean
  warehouse_id: Boolean
}

input OrderSumAggregateInput {
  id: Boolean
  client_id: Boolean
  product_id: Boolean
  product_count: Boolean
  warehouse_id: Boolean
}

input OrderMinAggregateInput {
  id: Boolean
  order_date: Boolean
  client_id: Boolean
  product_id: Boolean
  product_count: Boolean
  warehouse_id: Boolean
}

input OrderMaxAggregateInput {
  id: Boolean
  order_date: Boolean
  client_id: Boolean
  product_id: Boolean
  product_count: Boolean
  warehouse_id: Boolean
}

input InvoiceOrderByWithRelationInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
  transport_date: SortOrder
  product: ProductOrderByWithRelationInput
  order: OrderOrderByWithRelationInput
  company: CompanyOrderByWithRelationInput
}

input InvoiceWhereUniqueInput {
  id: Int
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  total_amount: IntFilter
  product_id: IntFilter
  order_id: IntFilter
  company_id: IntFilter
  transport_date: DateTimeFilter
  product: ProductRelationFilter
  order: OrderRelationFilter
  company: CompanyRelationFilter
}

enum InvoiceScalarFieldEnum {
  id
  total_amount
  product_id
  order_id
  company_id
  transport_date
}

input InvoiceOrderByWithAggregationInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
  transport_date: SortOrder
  _count: InvoiceCountOrderByAggregateInput
  _avg: InvoiceAvgOrderByAggregateInput
  _max: InvoiceMaxOrderByAggregateInput
  _min: InvoiceMinOrderByAggregateInput
  _sum: InvoiceSumOrderByAggregateInput
}

input InvoiceCountOrderByAggregateInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
  transport_date: SortOrder
}

input InvoiceAvgOrderByAggregateInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
}

input InvoiceMaxOrderByAggregateInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
  transport_date: SortOrder
}

input InvoiceMinOrderByAggregateInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
  transport_date: SortOrder
}

input InvoiceSumOrderByAggregateInput {
  id: SortOrder
  total_amount: SortOrder
  product_id: SortOrder
  order_id: SortOrder
  company_id: SortOrder
}

input InvoiceScalarWhereWithAggregatesInput {
  AND: [InvoiceScalarWhereWithAggregatesInput!]
  OR: [InvoiceScalarWhereWithAggregatesInput!]
  NOT: [InvoiceScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  total_amount: IntWithAggregatesFilter
  product_id: IntWithAggregatesFilter
  order_id: IntWithAggregatesFilter
  company_id: IntWithAggregatesFilter
  transport_date: DateTimeWithAggregatesFilter
}

input InvoiceCountAggregateInput {
  id: Boolean
  total_amount: Boolean
  product_id: Boolean
  order_id: Boolean
  company_id: Boolean
  transport_date: Boolean
  _all: Boolean
}

input InvoiceAvgAggregateInput {
  id: Boolean
  total_amount: Boolean
  product_id: Boolean
  order_id: Boolean
  company_id: Boolean
}

input InvoiceSumAggregateInput {
  id: Boolean
  total_amount: Boolean
  product_id: Boolean
  order_id: Boolean
  company_id: Boolean
}

input InvoiceMinAggregateInput {
  id: Boolean
  total_amount: Boolean
  product_id: Boolean
  order_id: Boolean
  company_id: Boolean
  transport_date: Boolean
}

input InvoiceMaxAggregateInput {
  id: Boolean
  total_amount: Boolean
  product_id: Boolean
  order_id: Boolean
  company_id: Boolean
  transport_date: Boolean
}

input WarehouseWhereUniqueInput {
  id: Int
  AND: [WarehouseWhereInput!]
  OR: [WarehouseWhereInput!]
  NOT: [WarehouseWhereInput!]
  address: StringFilter
  company_id: IntFilter
  company: CompanyRelationFilter
  transports: TransportListRelationFilter
  order: OrderListRelationFilter
}

enum WarehouseScalarFieldEnum {
  id
  address
  company_id
}

input WarehouseOrderByWithAggregationInput {
  id: SortOrder
  address: SortOrder
  company_id: SortOrder
  _count: WarehouseCountOrderByAggregateInput
  _avg: WarehouseAvgOrderByAggregateInput
  _max: WarehouseMaxOrderByAggregateInput
  _min: WarehouseMinOrderByAggregateInput
  _sum: WarehouseSumOrderByAggregateInput
}

input WarehouseCountOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  company_id: SortOrder
}

input WarehouseAvgOrderByAggregateInput {
  id: SortOrder
  company_id: SortOrder
}

input WarehouseMaxOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  company_id: SortOrder
}

input WarehouseMinOrderByAggregateInput {
  id: SortOrder
  address: SortOrder
  company_id: SortOrder
}

input WarehouseSumOrderByAggregateInput {
  id: SortOrder
  company_id: SortOrder
}

input WarehouseScalarWhereWithAggregatesInput {
  AND: [WarehouseScalarWhereWithAggregatesInput!]
  OR: [WarehouseScalarWhereWithAggregatesInput!]
  NOT: [WarehouseScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  address: StringWithAggregatesFilter
  company_id: IntWithAggregatesFilter
}

input WarehouseCountAggregateInput {
  id: Boolean
  address: Boolean
  company_id: Boolean
  _all: Boolean
}

input WarehouseAvgAggregateInput {
  id: Boolean
  company_id: Boolean
}

input WarehouseSumAggregateInput {
  id: Boolean
  company_id: Boolean
}

input WarehouseMinAggregateInput {
  id: Boolean
  address: Boolean
  company_id: Boolean
}

input WarehouseMaxAggregateInput {
  id: Boolean
  address: Boolean
  company_id: Boolean
}

input StaffOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  position: SortOrder
  education: SortOrder
  salary: SortOrder
  hire_date: SortOrder
  company_id: SortOrder
  company: CompanyOrderByWithRelationInput
}

input StaffWhereUniqueInput {
  id: Int
  AND: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  NOT: [StaffWhereInput!]
  name: StringFilter
  position: StringFilter
  education: StringFilter
  salary: FloatFilter
  hire_date: DateTimeFilter
  company_id: IntFilter
  company: CompanyRelationFilter
}

enum StaffScalarFieldEnum {
  id
  name
  position
  education
  salary
  hire_date
  company_id
}

input StaffOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  position: SortOrder
  education: SortOrder
  salary: SortOrder
  hire_date: SortOrder
  company_id: SortOrder
  _count: StaffCountOrderByAggregateInput
  _avg: StaffAvgOrderByAggregateInput
  _max: StaffMaxOrderByAggregateInput
  _min: StaffMinOrderByAggregateInput
  _sum: StaffSumOrderByAggregateInput
}

input StaffCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  position: SortOrder
  education: SortOrder
  salary: SortOrder
  hire_date: SortOrder
  company_id: SortOrder
}

input StaffAvgOrderByAggregateInput {
  id: SortOrder
  salary: SortOrder
  company_id: SortOrder
}

input StaffMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  position: SortOrder
  education: SortOrder
  salary: SortOrder
  hire_date: SortOrder
  company_id: SortOrder
}

input StaffMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  position: SortOrder
  education: SortOrder
  salary: SortOrder
  hire_date: SortOrder
  company_id: SortOrder
}

input StaffSumOrderByAggregateInput {
  id: SortOrder
  salary: SortOrder
  company_id: SortOrder
}

input StaffScalarWhereWithAggregatesInput {
  AND: [StaffScalarWhereWithAggregatesInput!]
  OR: [StaffScalarWhereWithAggregatesInput!]
  NOT: [StaffScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  position: StringWithAggregatesFilter
  education: StringWithAggregatesFilter
  salary: FloatWithAggregatesFilter
  hire_date: DateTimeWithAggregatesFilter
  company_id: IntWithAggregatesFilter
}

input StaffCountAggregateInput {
  id: Boolean
  name: Boolean
  position: Boolean
  education: Boolean
  salary: Boolean
  hire_date: Boolean
  company_id: Boolean
  _all: Boolean
}

input StaffAvgAggregateInput {
  id: Boolean
  salary: Boolean
  company_id: Boolean
}

input StaffSumAggregateInput {
  id: Boolean
  salary: Boolean
  company_id: Boolean
}

input StaffMinAggregateInput {
  id: Boolean
  name: Boolean
  position: Boolean
  education: Boolean
  salary: Boolean
  hire_date: Boolean
  company_id: Boolean
}

input StaffMaxAggregateInput {
  id: Boolean
  name: Boolean
  position: Boolean
  education: Boolean
  salary: Boolean
  hire_date: Boolean
  company_id: Boolean
}

input TransportOrderByWithRelationInput {
  id: SortOrder
  vehicle_number: SortOrder
  vehicle_brand: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  owner_name: SortOrder
  warehouse_id: SortOrder
  warehouse: WarehouseOrderByWithRelationInput
}

input TransportWhereUniqueInput {
  id: Int
  AND: [TransportWhereInput!]
  OR: [TransportWhereInput!]
  NOT: [TransportWhereInput!]
  vehicle_number: StringFilter
  vehicle_brand: StringFilter
  load_capacity: IntFilter
  year_of_manufacture: IntFilter
  owner_name: StringFilter
  warehouse_id: IntFilter
  warehouse: WarehouseRelationFilter
}

enum TransportScalarFieldEnum {
  id
  vehicle_number
  vehicle_brand
  load_capacity
  year_of_manufacture
  owner_name
  warehouse_id
}

input TransportOrderByWithAggregationInput {
  id: SortOrder
  vehicle_number: SortOrder
  vehicle_brand: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  owner_name: SortOrder
  warehouse_id: SortOrder
  _count: TransportCountOrderByAggregateInput
  _avg: TransportAvgOrderByAggregateInput
  _max: TransportMaxOrderByAggregateInput
  _min: TransportMinOrderByAggregateInput
  _sum: TransportSumOrderByAggregateInput
}

input TransportCountOrderByAggregateInput {
  id: SortOrder
  vehicle_number: SortOrder
  vehicle_brand: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  owner_name: SortOrder
  warehouse_id: SortOrder
}

input TransportAvgOrderByAggregateInput {
  id: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  warehouse_id: SortOrder
}

input TransportMaxOrderByAggregateInput {
  id: SortOrder
  vehicle_number: SortOrder
  vehicle_brand: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  owner_name: SortOrder
  warehouse_id: SortOrder
}

input TransportMinOrderByAggregateInput {
  id: SortOrder
  vehicle_number: SortOrder
  vehicle_brand: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  owner_name: SortOrder
  warehouse_id: SortOrder
}

input TransportSumOrderByAggregateInput {
  id: SortOrder
  load_capacity: SortOrder
  year_of_manufacture: SortOrder
  warehouse_id: SortOrder
}

input TransportScalarWhereWithAggregatesInput {
  AND: [TransportScalarWhereWithAggregatesInput!]
  OR: [TransportScalarWhereWithAggregatesInput!]
  NOT: [TransportScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  vehicle_number: StringWithAggregatesFilter
  vehicle_brand: StringWithAggregatesFilter
  load_capacity: IntWithAggregatesFilter
  year_of_manufacture: IntWithAggregatesFilter
  owner_name: StringWithAggregatesFilter
  warehouse_id: IntWithAggregatesFilter
}

input TransportCountAggregateInput {
  id: Boolean
  vehicle_number: Boolean
  vehicle_brand: Boolean
  load_capacity: Boolean
  year_of_manufacture: Boolean
  owner_name: Boolean
  warehouse_id: Boolean
  _all: Boolean
}

input TransportAvgAggregateInput {
  id: Boolean
  load_capacity: Boolean
  year_of_manufacture: Boolean
  warehouse_id: Boolean
}

input TransportSumAggregateInput {
  id: Boolean
  load_capacity: Boolean
  year_of_manufacture: Boolean
  warehouse_id: Boolean
}

input TransportMinAggregateInput {
  id: Boolean
  vehicle_number: Boolean
  vehicle_brand: Boolean
  load_capacity: Boolean
  year_of_manufacture: Boolean
  owner_name: Boolean
  warehouse_id: Boolean
}

input TransportMaxAggregateInput {
  id: Boolean
  vehicle_number: Boolean
  vehicle_brand: Boolean
  load_capacity: Boolean
  year_of_manufacture: Boolean
  owner_name: Boolean
  warehouse_id: Boolean
}

type Mutation {
  createSupplier(data: SupplierCreateInput!, relationLoadStrategy: RelationLoadStrategy): Supplier
  createManySupplier: AffectedRows
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Supplier
  updateManySupplier: AffectedRows
  deleteSupplier(where: SupplierWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Supplier
  deleteManySupplier(where: SupplierWhereInput): AffectedRows
  createAccount(data: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy): Account
  createManyAccount: AffectedRows
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Account
  updateManyAccount: AffectedRows
  deleteAccount(where: AccountWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Account
  deleteManyAccount(where: AccountWhereInput): AffectedRows
  createProduct(data: ProductCreateInput!, relationLoadStrategy: RelationLoadStrategy): Product
  createManyProduct: AffectedRows
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Product
  updateManyProduct: AffectedRows
  deleteProduct(where: ProductWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Product
  deleteManyProduct(where: ProductWhereInput): AffectedRows
  createClient(data: ClientCreateInput!, relationLoadStrategy: RelationLoadStrategy): Client
  createManyClient: AffectedRows
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Client
  updateManyClient: AffectedRows
  deleteClient(where: ClientWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Client
  deleteManyClient(where: ClientWhereInput): AffectedRows
  createCompany(data: CompanyCreateInput!, relationLoadStrategy: RelationLoadStrategy): Company
  createManyCompany: AffectedRows
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Company
  updateManyCompany: AffectedRows
  deleteCompany(where: CompanyWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Company
  deleteManyCompany(where: CompanyWhereInput): AffectedRows
  createOrder(data: OrderCreateInput!, relationLoadStrategy: RelationLoadStrategy): Order
  createManyOrder: AffectedRows
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Order
  updateManyOrder: AffectedRows
  deleteOrder(where: OrderWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Order
  deleteManyOrder(where: OrderWhereInput): AffectedRows
  createInvoice(data: InvoiceCreateInput!, relationLoadStrategy: RelationLoadStrategy): Invoice
  createManyInvoice: AffectedRows
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Invoice
  updateManyInvoice: AffectedRows
  deleteInvoice(where: InvoiceWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Invoice
  deleteManyInvoice(where: InvoiceWhereInput): AffectedRows
  createWarehouse(data: WarehouseCreateInput!, relationLoadStrategy: RelationLoadStrategy): Warehouse
  createManyWarehouse: AffectedRows
  updateWarehouse(data: WarehouseUpdateInput!, where: WarehouseWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Warehouse
  updateManyWarehouse: AffectedRows
  deleteWarehouse(where: WarehouseWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Warehouse
  deleteManyWarehouse(where: WarehouseWhereInput): AffectedRows
  createStaff(data: StaffCreateInput!, relationLoadStrategy: RelationLoadStrategy): Staff
  createManyStaff: AffectedRows
  updateStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Staff
  updateManyStaff: AffectedRows
  deleteStaff(where: StaffWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Staff
  deleteManyStaff(where: StaffWhereInput): AffectedRows
  createTransport(data: TransportCreateInput!, relationLoadStrategy: RelationLoadStrategy): Transport
  createManyTransport: AffectedRows
  updateTransport(data: TransportUpdateInput!, where: TransportWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Transport
  updateManyTransport: AffectedRows
  deleteTransport(where: TransportWhereUniqueInput!, relationLoadStrategy: RelationLoadStrategy): Transport
  deleteManyTransport(where: TransportWhereInput): AffectedRows
}

input SupplierCreateInput {
  name: String!
  address: String!
  account: AccountCreateNestedOneWithoutSupplierInput
  products: ProductCreateNestedManyWithoutSupplierInput
}

input AccountCreateNestedOneWithoutSupplierInput {
  create: AccountCreateWithoutSupplierInput
  connectOrCreate: AccountCreateOrConnectWithoutSupplierInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutSupplierInput {
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  client: ClientCreateNestedOneWithoutAccountInput
  company: CompanyCreateNestedOneWithoutAccountInput
}

input ClientCreateNestedOneWithoutAccountInput {
  create: ClientCreateWithoutAccountInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountInput
  connect: ClientWhereUniqueInput
}

input ClientCreateWithoutAccountInput {
  name: String!
  address: String!
  orders: OrderCreateNestedManyWithoutClientInput
}

input OrderCreateNestedManyWithoutClientInput {
  create: [OrderCreateWithoutClientInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutClientInput!]
  createMany: OrderCreateManyClientInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutClientInput {
  order_date: DateTime!
  product_count: Int!
  product: ProductCreateNestedOneWithoutOrdersInput!
  invoices: InvoiceCreateNestedManyWithoutOrderInput
  warehouse: WarehouseCreateNestedOneWithoutOrderInput!
}

input ProductCreateNestedOneWithoutOrdersInput {
  create: ProductCreateWithoutOrdersInput
  connectOrCreate: ProductCreateOrConnectWithoutOrdersInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutOrdersInput {
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  supplier: SupplierCreateNestedOneWithoutProductsInput!
  invoices: InvoiceCreateNestedManyWithoutProductInput
}

input SupplierCreateNestedOneWithoutProductsInput {
  create: SupplierCreateWithoutProductsInput
  connectOrCreate: SupplierCreateOrConnectWithoutProductsInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutProductsInput {
  name: String!
  address: String!
  account: AccountCreateNestedOneWithoutSupplierInput
}

input SupplierCreateOrConnectWithoutProductsInput {
  where: SupplierWhereUniqueInput!
  create: SupplierCreateWithoutProductsInput!
}

input InvoiceCreateNestedManyWithoutProductInput {
  create: [InvoiceCreateWithoutProductInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutProductInput!]
  createMany: InvoiceCreateManyProductInputEnvelope
  connect: [InvoiceWhereUniqueInput!]
}

input InvoiceCreateWithoutProductInput {
  total_amount: Int!
  transport_date: DateTime!
  order: OrderCreateNestedOneWithoutInvoicesInput!
  company: CompanyCreateNestedOneWithoutInvoicesInput!
}

input OrderCreateNestedOneWithoutInvoicesInput {
  create: OrderCreateWithoutInvoicesInput
  connectOrCreate: OrderCreateOrConnectWithoutInvoicesInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutInvoicesInput {
  order_date: DateTime!
  product_count: Int!
  client: ClientCreateNestedOneWithoutOrdersInput!
  product: ProductCreateNestedOneWithoutOrdersInput!
  warehouse: WarehouseCreateNestedOneWithoutOrderInput!
}

input ClientCreateNestedOneWithoutOrdersInput {
  create: ClientCreateWithoutOrdersInput
  connectOrCreate: ClientCreateOrConnectWithoutOrdersInput
  connect: ClientWhereUniqueInput
}

input ClientCreateWithoutOrdersInput {
  name: String!
  address: String!
  account: AccountCreateNestedOneWithoutClientInput
}

input AccountCreateNestedOneWithoutClientInput {
  create: AccountCreateWithoutClientInput
  connectOrCreate: AccountCreateOrConnectWithoutClientInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutClientInput {
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  supplier: SupplierCreateNestedOneWithoutAccountInput
  company: CompanyCreateNestedOneWithoutAccountInput
}

input SupplierCreateNestedOneWithoutAccountInput {
  create: SupplierCreateWithoutAccountInput
  connectOrCreate: SupplierCreateOrConnectWithoutAccountInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutAccountInput {
  name: String!
  address: String!
  products: ProductCreateNestedManyWithoutSupplierInput
}

input ProductCreateNestedManyWithoutSupplierInput {
  create: [ProductCreateWithoutSupplierInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSupplierInput!]
  createMany: ProductCreateManySupplierInputEnvelope
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutSupplierInput {
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  invoices: InvoiceCreateNestedManyWithoutProductInput
  orders: OrderCreateNestedManyWithoutProductInput
}

input OrderCreateNestedManyWithoutProductInput {
  create: [OrderCreateWithoutProductInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutProductInput!]
  createMany: OrderCreateManyProductInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutProductInput {
  order_date: DateTime!
  product_count: Int!
  client: ClientCreateNestedOneWithoutOrdersInput!
  invoices: InvoiceCreateNestedManyWithoutOrderInput
  warehouse: WarehouseCreateNestedOneWithoutOrderInput!
}

input InvoiceCreateNestedManyWithoutOrderInput {
  create: [InvoiceCreateWithoutOrderInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutOrderInput!]
  createMany: InvoiceCreateManyOrderInputEnvelope
  connect: [InvoiceWhereUniqueInput!]
}

input InvoiceCreateWithoutOrderInput {
  total_amount: Int!
  transport_date: DateTime!
  product: ProductCreateNestedOneWithoutInvoicesInput!
  company: CompanyCreateNestedOneWithoutInvoicesInput!
}

input ProductCreateNestedOneWithoutInvoicesInput {
  create: ProductCreateWithoutInvoicesInput
  connectOrCreate: ProductCreateOrConnectWithoutInvoicesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutInvoicesInput {
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  supplier: SupplierCreateNestedOneWithoutProductsInput!
  orders: OrderCreateNestedManyWithoutProductInput
}

input ProductCreateOrConnectWithoutInvoicesInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutInvoicesInput!
}

input CompanyCreateNestedOneWithoutInvoicesInput {
  create: CompanyCreateWithoutInvoicesInput
  connectOrCreate: CompanyCreateOrConnectWithoutInvoicesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutInvoicesInput {
  name: String!
  address: String!
  phone: String!
  account: AccountCreateNestedOneWithoutCompanyInput
  warehouses: WarehouseCreateNestedManyWithoutCompanyInput
  staffes: StaffCreateNestedManyWithoutCompanyInput
}

input AccountCreateNestedOneWithoutCompanyInput {
  create: AccountCreateWithoutCompanyInput
  connectOrCreate: AccountCreateOrConnectWithoutCompanyInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutCompanyInput {
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  client: ClientCreateNestedOneWithoutAccountInput
  supplier: SupplierCreateNestedOneWithoutAccountInput
}

input AccountCreateOrConnectWithoutCompanyInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutCompanyInput!
}

input WarehouseCreateNestedManyWithoutCompanyInput {
  create: [WarehouseCreateWithoutCompanyInput!]
  connectOrCreate: [WarehouseCreateOrConnectWithoutCompanyInput!]
  createMany: WarehouseCreateManyCompanyInputEnvelope
  connect: [WarehouseWhereUniqueInput!]
}

input WarehouseCreateWithoutCompanyInput {
  address: String!
  transports: TransportCreateNestedManyWithoutWarehouseInput
  order: OrderCreateNestedManyWithoutWarehouseInput
}

input TransportCreateNestedManyWithoutWarehouseInput {
  create: [TransportCreateWithoutWarehouseInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutWarehouseInput!]
  createMany: TransportCreateManyWarehouseInputEnvelope
  connect: [TransportWhereUniqueInput!]
}

input TransportCreateWithoutWarehouseInput {
  vehicle_number: String!
  vehicle_brand: String!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: String!
}

input TransportCreateOrConnectWithoutWarehouseInput {
  where: TransportWhereUniqueInput!
  create: TransportCreateWithoutWarehouseInput!
}

input TransportCreateManyWarehouseInputEnvelope {
  data: [TransportCreateManyWarehouseInput!]!
  skipDuplicates: Boolean
}

input TransportCreateManyWarehouseInput {
  id: Int
  vehicle_number: String!
  vehicle_brand: String!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: String!
}

input OrderCreateNestedManyWithoutWarehouseInput {
  create: [OrderCreateWithoutWarehouseInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutWarehouseInput!]
  createMany: OrderCreateManyWarehouseInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutWarehouseInput {
  order_date: DateTime!
  product_count: Int!
  client: ClientCreateNestedOneWithoutOrdersInput!
  product: ProductCreateNestedOneWithoutOrdersInput!
  invoices: InvoiceCreateNestedManyWithoutOrderInput
}

input OrderCreateOrConnectWithoutWarehouseInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutWarehouseInput!
}

input OrderCreateManyWarehouseInputEnvelope {
  data: [OrderCreateManyWarehouseInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyWarehouseInput {
  id: Int
  order_date: DateTime!
  client_id: Int!
  product_id: Int!
  product_count: Int!
}

input WarehouseCreateOrConnectWithoutCompanyInput {
  where: WarehouseWhereUniqueInput!
  create: WarehouseCreateWithoutCompanyInput!
}

input WarehouseCreateManyCompanyInputEnvelope {
  data: [WarehouseCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input WarehouseCreateManyCompanyInput {
  id: Int
  address: String!
}

input StaffCreateNestedManyWithoutCompanyInput {
  create: [StaffCreateWithoutCompanyInput!]
  connectOrCreate: [StaffCreateOrConnectWithoutCompanyInput!]
  createMany: StaffCreateManyCompanyInputEnvelope
  connect: [StaffWhereUniqueInput!]
}

input StaffCreateWithoutCompanyInput {
  name: String!
  position: String!
  education: String!
  salary: Float!
  hire_date: DateTime!
}

input StaffCreateOrConnectWithoutCompanyInput {
  where: StaffWhereUniqueInput!
  create: StaffCreateWithoutCompanyInput!
}

input StaffCreateManyCompanyInputEnvelope {
  data: [StaffCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input StaffCreateManyCompanyInput {
  id: Int
  name: String!
  position: String!
  education: String!
  salary: Float!
  hire_date: DateTime!
}

input CompanyCreateOrConnectWithoutInvoicesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutInvoicesInput!
}

input InvoiceCreateOrConnectWithoutOrderInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutOrderInput!
}

input InvoiceCreateManyOrderInputEnvelope {
  data: [InvoiceCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input InvoiceCreateManyOrderInput {
  id: Int
  total_amount: Int!
  product_id: Int!
  company_id: Int!
  transport_date: DateTime!
}

input WarehouseCreateNestedOneWithoutOrderInput {
  create: WarehouseCreateWithoutOrderInput
  connectOrCreate: WarehouseCreateOrConnectWithoutOrderInput
  connect: WarehouseWhereUniqueInput
}

input WarehouseCreateWithoutOrderInput {
  address: String!
  company: CompanyCreateNestedOneWithoutWarehousesInput!
  transports: TransportCreateNestedManyWithoutWarehouseInput
}

input CompanyCreateNestedOneWithoutWarehousesInput {
  create: CompanyCreateWithoutWarehousesInput
  connectOrCreate: CompanyCreateOrConnectWithoutWarehousesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutWarehousesInput {
  name: String!
  address: String!
  phone: String!
  account: AccountCreateNestedOneWithoutCompanyInput
  staffes: StaffCreateNestedManyWithoutCompanyInput
  invoices: InvoiceCreateNestedManyWithoutCompanyInput
}

input InvoiceCreateNestedManyWithoutCompanyInput {
  create: [InvoiceCreateWithoutCompanyInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutCompanyInput!]
  createMany: InvoiceCreateManyCompanyInputEnvelope
  connect: [InvoiceWhereUniqueInput!]
}

input InvoiceCreateWithoutCompanyInput {
  total_amount: Int!
  transport_date: DateTime!
  product: ProductCreateNestedOneWithoutInvoicesInput!
  order: OrderCreateNestedOneWithoutInvoicesInput!
}

input InvoiceCreateOrConnectWithoutCompanyInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutCompanyInput!
}

input InvoiceCreateManyCompanyInputEnvelope {
  data: [InvoiceCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input InvoiceCreateManyCompanyInput {
  id: Int
  total_amount: Int!
  product_id: Int!
  order_id: Int!
  transport_date: DateTime!
}

input CompanyCreateOrConnectWithoutWarehousesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutWarehousesInput!
}

input WarehouseCreateOrConnectWithoutOrderInput {
  where: WarehouseWhereUniqueInput!
  create: WarehouseCreateWithoutOrderInput!
}

input OrderCreateOrConnectWithoutProductInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutProductInput!
}

input OrderCreateManyProductInputEnvelope {
  data: [OrderCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyProductInput {
  id: Int
  order_date: DateTime!
  client_id: Int!
  product_count: Int!
  warehouse_id: Int!
}

input ProductCreateOrConnectWithoutSupplierInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutSupplierInput!
}

input ProductCreateManySupplierInputEnvelope {
  data: [ProductCreateManySupplierInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManySupplierInput {
  id: Int
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
}

input SupplierCreateOrConnectWithoutAccountInput {
  where: SupplierWhereUniqueInput!
  create: SupplierCreateWithoutAccountInput!
}

input CompanyCreateNestedOneWithoutAccountInput {
  create: CompanyCreateWithoutAccountInput
  connectOrCreate: CompanyCreateOrConnectWithoutAccountInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutAccountInput {
  name: String!
  address: String!
  phone: String!
  warehouses: WarehouseCreateNestedManyWithoutCompanyInput
  staffes: StaffCreateNestedManyWithoutCompanyInput
  invoices: InvoiceCreateNestedManyWithoutCompanyInput
}

input CompanyCreateOrConnectWithoutAccountInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutAccountInput!
}

input AccountCreateOrConnectWithoutClientInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutClientInput!
}

input ClientCreateOrConnectWithoutOrdersInput {
  where: ClientWhereUniqueInput!
  create: ClientCreateWithoutOrdersInput!
}

input OrderCreateOrConnectWithoutInvoicesInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutInvoicesInput!
}

input InvoiceCreateOrConnectWithoutProductInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutProductInput!
}

input InvoiceCreateManyProductInputEnvelope {
  data: [InvoiceCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input InvoiceCreateManyProductInput {
  id: Int
  total_amount: Int!
  order_id: Int!
  company_id: Int!
  transport_date: DateTime!
}

input ProductCreateOrConnectWithoutOrdersInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutOrdersInput!
}

input OrderCreateOrConnectWithoutClientInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutClientInput!
}

input OrderCreateManyClientInputEnvelope {
  data: [OrderCreateManyClientInput!]!
  skipDuplicates: Boolean
}

input OrderCreateManyClientInput {
  id: Int
  order_date: DateTime!
  product_id: Int!
  product_count: Int!
  warehouse_id: Int!
}

input ClientCreateOrConnectWithoutAccountInput {
  where: ClientWhereUniqueInput!
  create: ClientCreateWithoutAccountInput!
}

input AccountCreateOrConnectWithoutSupplierInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutSupplierInput!
}

input SupplierUpdateInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutSupplierNestedInput
  products: ProductUpdateManyWithoutSupplierNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input AccountUpdateOneWithoutSupplierNestedInput {
  create: AccountCreateWithoutSupplierInput
  connectOrCreate: AccountCreateOrConnectWithoutSupplierInput
  upsert: AccountUpsertWithoutSupplierInput
  disconnect: AccountWhereInput
  delete: AccountWhereInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutSupplierInput
}

input AccountUpsertWithoutSupplierInput {
  update: AccountUpdateWithoutSupplierInput!
  create: AccountCreateWithoutSupplierInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutSupplierInput {
  bank_name: StringFieldUpdateOperationsInput
  account_number: StringFieldUpdateOperationsInput
  balance: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  has_credit: BoolFieldUpdateOperationsInput
  credit_amount: FloatFieldUpdateOperationsInput
  client: ClientUpdateOneWithoutAccountNestedInput
  company: CompanyUpdateOneWithoutAccountNestedInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input ClientUpdateOneWithoutAccountNestedInput {
  create: ClientCreateWithoutAccountInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountInput
  upsert: ClientUpsertWithoutAccountInput
  disconnect: ClientWhereInput
  delete: ClientWhereInput
  connect: ClientWhereUniqueInput
  update: ClientUpdateToOneWithWhereWithoutAccountInput
}

input ClientUpsertWithoutAccountInput {
  update: ClientUpdateWithoutAccountInput!
  create: ClientCreateWithoutAccountInput!
  where: ClientWhereInput
}

input ClientUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutClientNestedInput
}

input OrderUpdateManyWithoutClientNestedInput {
  create: [OrderCreateWithoutClientInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutClientInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutClientInput!]
  createMany: OrderCreateManyClientInputEnvelope
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutClientInput!]
  deleteMany: [OrderScalarWhereInput!]
}

input OrderUpsertWithWhereUniqueWithoutClientInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutClientInput!
  create: OrderCreateWithoutClientInput!
}

input OrderUpdateWithoutClientInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutOrdersNestedInput
  invoices: InvoiceUpdateManyWithoutOrderNestedInput
  warehouse: WarehouseUpdateOneRequiredWithoutOrderNestedInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input ProductUpdateOneRequiredWithoutOrdersNestedInput {
  create: ProductCreateWithoutOrdersInput
  connectOrCreate: ProductCreateOrConnectWithoutOrdersInput
  upsert: ProductUpsertWithoutOrdersInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateToOneWithWhereWithoutOrdersInput
}

input ProductUpsertWithoutOrdersInput {
  update: ProductUpdateWithoutOrdersInput!
  create: ProductCreateWithoutOrdersInput!
  where: ProductWhereInput
}

input ProductUpdateWithoutOrdersInput {
  product_name: StringFieldUpdateOperationsInput
  unit_of_measurement: StringFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  manufacturer_address: StringFieldUpdateOperationsInput
  product_quantity: IntFieldUpdateOperationsInput
  supplier: SupplierUpdateOneRequiredWithoutProductsNestedInput
  invoices: InvoiceUpdateManyWithoutProductNestedInput
}

input DecimalFieldUpdateOperationsInput {
  set: Decimal
  increment: Decimal
  decrement: Decimal
  multiply: Decimal
  divide: Decimal
}

input SupplierUpdateOneRequiredWithoutProductsNestedInput {
  create: SupplierCreateWithoutProductsInput
  connectOrCreate: SupplierCreateOrConnectWithoutProductsInput
  upsert: SupplierUpsertWithoutProductsInput
  connect: SupplierWhereUniqueInput
  update: SupplierUpdateToOneWithWhereWithoutProductsInput
}

input SupplierUpsertWithoutProductsInput {
  update: SupplierUpdateWithoutProductsInput!
  create: SupplierCreateWithoutProductsInput!
  where: SupplierWhereInput
}

input SupplierUpdateWithoutProductsInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutSupplierNestedInput
}

input SupplierUpdateToOneWithWhereWithoutProductsInput {
  where: SupplierWhereInput
  data: SupplierUpdateWithoutProductsInput!
}

input InvoiceUpdateManyWithoutProductNestedInput {
  create: [InvoiceCreateWithoutProductInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutProductInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutProductInput!]
  createMany: InvoiceCreateManyProductInputEnvelope
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  connect: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [InvoiceUpdateManyWithWhereWithoutProductInput!]
  deleteMany: [InvoiceScalarWhereInput!]
}

input InvoiceUpsertWithWhereUniqueWithoutProductInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateWithoutProductInput!
  create: InvoiceCreateWithoutProductInput!
}

input InvoiceUpdateWithoutProductInput {
  total_amount: IntFieldUpdateOperationsInput
  transport_date: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutInvoicesNestedInput
  company: CompanyUpdateOneRequiredWithoutInvoicesNestedInput
}

input OrderUpdateOneRequiredWithoutInvoicesNestedInput {
  create: OrderCreateWithoutInvoicesInput
  connectOrCreate: OrderCreateOrConnectWithoutInvoicesInput
  upsert: OrderUpsertWithoutInvoicesInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutInvoicesInput
}

input OrderUpsertWithoutInvoicesInput {
  update: OrderUpdateWithoutInvoicesInput!
  create: OrderCreateWithoutInvoicesInput!
  where: OrderWhereInput
}

input OrderUpdateWithoutInvoicesInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
  client: ClientUpdateOneRequiredWithoutOrdersNestedInput
  product: ProductUpdateOneRequiredWithoutOrdersNestedInput
  warehouse: WarehouseUpdateOneRequiredWithoutOrderNestedInput
}

input ClientUpdateOneRequiredWithoutOrdersNestedInput {
  create: ClientCreateWithoutOrdersInput
  connectOrCreate: ClientCreateOrConnectWithoutOrdersInput
  upsert: ClientUpsertWithoutOrdersInput
  connect: ClientWhereUniqueInput
  update: ClientUpdateToOneWithWhereWithoutOrdersInput
}

input ClientUpsertWithoutOrdersInput {
  update: ClientUpdateWithoutOrdersInput!
  create: ClientCreateWithoutOrdersInput!
  where: ClientWhereInput
}

input ClientUpdateWithoutOrdersInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutClientNestedInput
}

input AccountUpdateOneWithoutClientNestedInput {
  create: AccountCreateWithoutClientInput
  connectOrCreate: AccountCreateOrConnectWithoutClientInput
  upsert: AccountUpsertWithoutClientInput
  disconnect: AccountWhereInput
  delete: AccountWhereInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutClientInput
}

input AccountUpsertWithoutClientInput {
  update: AccountUpdateWithoutClientInput!
  create: AccountCreateWithoutClientInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutClientInput {
  bank_name: StringFieldUpdateOperationsInput
  account_number: StringFieldUpdateOperationsInput
  balance: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  has_credit: BoolFieldUpdateOperationsInput
  credit_amount: FloatFieldUpdateOperationsInput
  supplier: SupplierUpdateOneWithoutAccountNestedInput
  company: CompanyUpdateOneWithoutAccountNestedInput
}

input SupplierUpdateOneWithoutAccountNestedInput {
  create: SupplierCreateWithoutAccountInput
  connectOrCreate: SupplierCreateOrConnectWithoutAccountInput
  upsert: SupplierUpsertWithoutAccountInput
  disconnect: SupplierWhereInput
  delete: SupplierWhereInput
  connect: SupplierWhereUniqueInput
  update: SupplierUpdateToOneWithWhereWithoutAccountInput
}

input SupplierUpsertWithoutAccountInput {
  update: SupplierUpdateWithoutAccountInput!
  create: SupplierCreateWithoutAccountInput!
  where: SupplierWhereInput
}

input SupplierUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  products: ProductUpdateManyWithoutSupplierNestedInput
}

input ProductUpdateManyWithoutSupplierNestedInput {
  create: [ProductCreateWithoutSupplierInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutSupplierInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutSupplierInput!]
  createMany: ProductCreateManySupplierInputEnvelope
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutSupplierInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutSupplierInput!]
  deleteMany: [ProductScalarWhereInput!]
}

input ProductUpsertWithWhereUniqueWithoutSupplierInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutSupplierInput!
  create: ProductCreateWithoutSupplierInput!
}

input ProductUpdateWithoutSupplierInput {
  product_name: StringFieldUpdateOperationsInput
  unit_of_measurement: StringFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  manufacturer_address: StringFieldUpdateOperationsInput
  product_quantity: IntFieldUpdateOperationsInput
  invoices: InvoiceUpdateManyWithoutProductNestedInput
  orders: OrderUpdateManyWithoutProductNestedInput
}

input OrderUpdateManyWithoutProductNestedInput {
  create: [OrderCreateWithoutProductInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutProductInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutProductInput!]
  createMany: OrderCreateManyProductInputEnvelope
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutProductInput!]
  deleteMany: [OrderScalarWhereInput!]
}

input OrderUpsertWithWhereUniqueWithoutProductInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutProductInput!
  create: OrderCreateWithoutProductInput!
}

input OrderUpdateWithoutProductInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
  client: ClientUpdateOneRequiredWithoutOrdersNestedInput
  invoices: InvoiceUpdateManyWithoutOrderNestedInput
  warehouse: WarehouseUpdateOneRequiredWithoutOrderNestedInput
}

input InvoiceUpdateManyWithoutOrderNestedInput {
  create: [InvoiceCreateWithoutOrderInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutOrderInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutOrderInput!]
  createMany: InvoiceCreateManyOrderInputEnvelope
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  connect: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [InvoiceUpdateManyWithWhereWithoutOrderInput!]
  deleteMany: [InvoiceScalarWhereInput!]
}

input InvoiceUpsertWithWhereUniqueWithoutOrderInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateWithoutOrderInput!
  create: InvoiceCreateWithoutOrderInput!
}

input InvoiceUpdateWithoutOrderInput {
  total_amount: IntFieldUpdateOperationsInput
  transport_date: DateTimeFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutInvoicesNestedInput
  company: CompanyUpdateOneRequiredWithoutInvoicesNestedInput
}

input ProductUpdateOneRequiredWithoutInvoicesNestedInput {
  create: ProductCreateWithoutInvoicesInput
  connectOrCreate: ProductCreateOrConnectWithoutInvoicesInput
  upsert: ProductUpsertWithoutInvoicesInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateToOneWithWhereWithoutInvoicesInput
}

input ProductUpsertWithoutInvoicesInput {
  update: ProductUpdateWithoutInvoicesInput!
  create: ProductCreateWithoutInvoicesInput!
  where: ProductWhereInput
}

input ProductUpdateWithoutInvoicesInput {
  product_name: StringFieldUpdateOperationsInput
  unit_of_measurement: StringFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  manufacturer_address: StringFieldUpdateOperationsInput
  product_quantity: IntFieldUpdateOperationsInput
  supplier: SupplierUpdateOneRequiredWithoutProductsNestedInput
  orders: OrderUpdateManyWithoutProductNestedInput
}

input ProductUpdateToOneWithWhereWithoutInvoicesInput {
  where: ProductWhereInput
  data: ProductUpdateWithoutInvoicesInput!
}

input CompanyUpdateOneRequiredWithoutInvoicesNestedInput {
  create: CompanyCreateWithoutInvoicesInput
  connectOrCreate: CompanyCreateOrConnectWithoutInvoicesInput
  upsert: CompanyUpsertWithoutInvoicesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutInvoicesInput
}

input CompanyUpsertWithoutInvoicesInput {
  update: CompanyUpdateWithoutInvoicesInput!
  create: CompanyCreateWithoutInvoicesInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutInvoicesInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutCompanyNestedInput
  warehouses: WarehouseUpdateManyWithoutCompanyNestedInput
  staffes: StaffUpdateManyWithoutCompanyNestedInput
}

input AccountUpdateOneWithoutCompanyNestedInput {
  create: AccountCreateWithoutCompanyInput
  connectOrCreate: AccountCreateOrConnectWithoutCompanyInput
  upsert: AccountUpsertWithoutCompanyInput
  disconnect: AccountWhereInput
  delete: AccountWhereInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutCompanyInput
}

input AccountUpsertWithoutCompanyInput {
  update: AccountUpdateWithoutCompanyInput!
  create: AccountCreateWithoutCompanyInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutCompanyInput {
  bank_name: StringFieldUpdateOperationsInput
  account_number: StringFieldUpdateOperationsInput
  balance: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  has_credit: BoolFieldUpdateOperationsInput
  credit_amount: FloatFieldUpdateOperationsInput
  client: ClientUpdateOneWithoutAccountNestedInput
  supplier: SupplierUpdateOneWithoutAccountNestedInput
}

input AccountUpdateToOneWithWhereWithoutCompanyInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutCompanyInput!
}

input WarehouseUpdateManyWithoutCompanyNestedInput {
  create: [WarehouseCreateWithoutCompanyInput!]
  connectOrCreate: [WarehouseCreateOrConnectWithoutCompanyInput!]
  upsert: [WarehouseUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: WarehouseCreateManyCompanyInputEnvelope
  set: [WarehouseWhereUniqueInput!]
  disconnect: [WarehouseWhereUniqueInput!]
  delete: [WarehouseWhereUniqueInput!]
  connect: [WarehouseWhereUniqueInput!]
  update: [WarehouseUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [WarehouseUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [WarehouseScalarWhereInput!]
}

input WarehouseUpsertWithWhereUniqueWithoutCompanyInput {
  where: WarehouseWhereUniqueInput!
  update: WarehouseUpdateWithoutCompanyInput!
  create: WarehouseCreateWithoutCompanyInput!
}

input WarehouseUpdateWithoutCompanyInput {
  address: StringFieldUpdateOperationsInput
  transports: TransportUpdateManyWithoutWarehouseNestedInput
  order: OrderUpdateManyWithoutWarehouseNestedInput
}

input TransportUpdateManyWithoutWarehouseNestedInput {
  create: [TransportCreateWithoutWarehouseInput!]
  connectOrCreate: [TransportCreateOrConnectWithoutWarehouseInput!]
  upsert: [TransportUpsertWithWhereUniqueWithoutWarehouseInput!]
  createMany: TransportCreateManyWarehouseInputEnvelope
  set: [TransportWhereUniqueInput!]
  disconnect: [TransportWhereUniqueInput!]
  delete: [TransportWhereUniqueInput!]
  connect: [TransportWhereUniqueInput!]
  update: [TransportUpdateWithWhereUniqueWithoutWarehouseInput!]
  updateMany: [TransportUpdateManyWithWhereWithoutWarehouseInput!]
  deleteMany: [TransportScalarWhereInput!]
}

input TransportUpsertWithWhereUniqueWithoutWarehouseInput {
  where: TransportWhereUniqueInput!
  update: TransportUpdateWithoutWarehouseInput!
  create: TransportCreateWithoutWarehouseInput!
}

input TransportUpdateWithoutWarehouseInput {
  vehicle_number: StringFieldUpdateOperationsInput
  vehicle_brand: StringFieldUpdateOperationsInput
  load_capacity: IntFieldUpdateOperationsInput
  year_of_manufacture: IntFieldUpdateOperationsInput
  owner_name: StringFieldUpdateOperationsInput
}

input TransportUpdateWithWhereUniqueWithoutWarehouseInput {
  where: TransportWhereUniqueInput!
  data: TransportUpdateWithoutWarehouseInput!
}

input TransportUpdateManyWithWhereWithoutWarehouseInput {
  where: TransportScalarWhereInput!
  data: TransportUpdateManyMutationInput!
}

input TransportScalarWhereInput {
  AND: [TransportScalarWhereInput!]
  OR: [TransportScalarWhereInput!]
  NOT: [TransportScalarWhereInput!]
  id: IntFilter
  vehicle_number: StringFilter
  vehicle_brand: StringFilter
  load_capacity: IntFilter
  year_of_manufacture: IntFilter
  owner_name: StringFilter
  warehouse_id: IntFilter
}

input TransportUpdateManyMutationInput {
  vehicle_number: StringFieldUpdateOperationsInput
  vehicle_brand: StringFieldUpdateOperationsInput
  load_capacity: IntFieldUpdateOperationsInput
  year_of_manufacture: IntFieldUpdateOperationsInput
  owner_name: StringFieldUpdateOperationsInput
}

input OrderUpdateManyWithoutWarehouseNestedInput {
  create: [OrderCreateWithoutWarehouseInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutWarehouseInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutWarehouseInput!]
  createMany: OrderCreateManyWarehouseInputEnvelope
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutWarehouseInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutWarehouseInput!]
  deleteMany: [OrderScalarWhereInput!]
}

input OrderUpsertWithWhereUniqueWithoutWarehouseInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutWarehouseInput!
  create: OrderCreateWithoutWarehouseInput!
}

input OrderUpdateWithoutWarehouseInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
  client: ClientUpdateOneRequiredWithoutOrdersNestedInput
  product: ProductUpdateOneRequiredWithoutOrdersNestedInput
  invoices: InvoiceUpdateManyWithoutOrderNestedInput
}

input OrderUpdateWithWhereUniqueWithoutWarehouseInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutWarehouseInput!
}

input OrderUpdateManyWithWhereWithoutWarehouseInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyMutationInput!
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  id: IntFilter
  order_date: DateTimeFilter
  client_id: IntFilter
  product_id: IntFilter
  product_count: IntFilter
  warehouse_id: IntFilter
}

input OrderUpdateManyMutationInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
}

input WarehouseUpdateWithWhereUniqueWithoutCompanyInput {
  where: WarehouseWhereUniqueInput!
  data: WarehouseUpdateWithoutCompanyInput!
}

input WarehouseUpdateManyWithWhereWithoutCompanyInput {
  where: WarehouseScalarWhereInput!
  data: WarehouseUpdateManyMutationInput!
}

input WarehouseScalarWhereInput {
  AND: [WarehouseScalarWhereInput!]
  OR: [WarehouseScalarWhereInput!]
  NOT: [WarehouseScalarWhereInput!]
  id: IntFilter
  address: StringFilter
  company_id: IntFilter
}

input WarehouseUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
}

input StaffUpdateManyWithoutCompanyNestedInput {
  create: [StaffCreateWithoutCompanyInput!]
  connectOrCreate: [StaffCreateOrConnectWithoutCompanyInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: StaffCreateManyCompanyInputEnvelope
  set: [StaffWhereUniqueInput!]
  disconnect: [StaffWhereUniqueInput!]
  delete: [StaffWhereUniqueInput!]
  connect: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [StaffUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [StaffScalarWhereInput!]
}

input StaffUpsertWithWhereUniqueWithoutCompanyInput {
  where: StaffWhereUniqueInput!
  update: StaffUpdateWithoutCompanyInput!
  create: StaffCreateWithoutCompanyInput!
}

input StaffUpdateWithoutCompanyInput {
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  education: StringFieldUpdateOperationsInput
  salary: FloatFieldUpdateOperationsInput
  hire_date: DateTimeFieldUpdateOperationsInput
}

input StaffUpdateWithWhereUniqueWithoutCompanyInput {
  where: StaffWhereUniqueInput!
  data: StaffUpdateWithoutCompanyInput!
}

input StaffUpdateManyWithWhereWithoutCompanyInput {
  where: StaffScalarWhereInput!
  data: StaffUpdateManyMutationInput!
}

input StaffScalarWhereInput {
  AND: [StaffScalarWhereInput!]
  OR: [StaffScalarWhereInput!]
  NOT: [StaffScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  position: StringFilter
  education: StringFilter
  salary: FloatFilter
  hire_date: DateTimeFilter
  company_id: IntFilter
}

input StaffUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  education: StringFieldUpdateOperationsInput
  salary: FloatFieldUpdateOperationsInput
  hire_date: DateTimeFieldUpdateOperationsInput
}

input CompanyUpdateToOneWithWhereWithoutInvoicesInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutInvoicesInput!
}

input InvoiceUpdateWithWhereUniqueWithoutOrderInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateWithoutOrderInput!
}

input InvoiceUpdateManyWithWhereWithoutOrderInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyMutationInput!
}

input InvoiceScalarWhereInput {
  AND: [InvoiceScalarWhereInput!]
  OR: [InvoiceScalarWhereInput!]
  NOT: [InvoiceScalarWhereInput!]
  id: IntFilter
  total_amount: IntFilter
  product_id: IntFilter
  order_id: IntFilter
  company_id: IntFilter
  transport_date: DateTimeFilter
}

input InvoiceUpdateManyMutationInput {
  total_amount: IntFieldUpdateOperationsInput
  transport_date: DateTimeFieldUpdateOperationsInput
}

input WarehouseUpdateOneRequiredWithoutOrderNestedInput {
  create: WarehouseCreateWithoutOrderInput
  connectOrCreate: WarehouseCreateOrConnectWithoutOrderInput
  upsert: WarehouseUpsertWithoutOrderInput
  connect: WarehouseWhereUniqueInput
  update: WarehouseUpdateToOneWithWhereWithoutOrderInput
}

input WarehouseUpsertWithoutOrderInput {
  update: WarehouseUpdateWithoutOrderInput!
  create: WarehouseCreateWithoutOrderInput!
  where: WarehouseWhereInput
}

input WarehouseUpdateWithoutOrderInput {
  address: StringFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutWarehousesNestedInput
  transports: TransportUpdateManyWithoutWarehouseNestedInput
}

input CompanyUpdateOneRequiredWithoutWarehousesNestedInput {
  create: CompanyCreateWithoutWarehousesInput
  connectOrCreate: CompanyCreateOrConnectWithoutWarehousesInput
  upsert: CompanyUpsertWithoutWarehousesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutWarehousesInput
}

input CompanyUpsertWithoutWarehousesInput {
  update: CompanyUpdateWithoutWarehousesInput!
  create: CompanyCreateWithoutWarehousesInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutWarehousesInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutCompanyNestedInput
  staffes: StaffUpdateManyWithoutCompanyNestedInput
  invoices: InvoiceUpdateManyWithoutCompanyNestedInput
}

input InvoiceUpdateManyWithoutCompanyNestedInput {
  create: [InvoiceCreateWithoutCompanyInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutCompanyInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: InvoiceCreateManyCompanyInputEnvelope
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  connect: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [InvoiceUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [InvoiceScalarWhereInput!]
}

input InvoiceUpsertWithWhereUniqueWithoutCompanyInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateWithoutCompanyInput!
  create: InvoiceCreateWithoutCompanyInput!
}

input InvoiceUpdateWithoutCompanyInput {
  total_amount: IntFieldUpdateOperationsInput
  transport_date: DateTimeFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutInvoicesNestedInput
  order: OrderUpdateOneRequiredWithoutInvoicesNestedInput
}

input InvoiceUpdateWithWhereUniqueWithoutCompanyInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateWithoutCompanyInput!
}

input InvoiceUpdateManyWithWhereWithoutCompanyInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyMutationInput!
}

input CompanyUpdateToOneWithWhereWithoutWarehousesInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutWarehousesInput!
}

input WarehouseUpdateToOneWithWhereWithoutOrderInput {
  where: WarehouseWhereInput
  data: WarehouseUpdateWithoutOrderInput!
}

input OrderUpdateWithWhereUniqueWithoutProductInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutProductInput!
}

input OrderUpdateManyWithWhereWithoutProductInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyMutationInput!
}

input ProductUpdateWithWhereUniqueWithoutSupplierInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutSupplierInput!
}

input ProductUpdateManyWithWhereWithoutSupplierInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyMutationInput!
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  id: IntFilter
  product_name: StringFilter
  unit_of_measurement: StringFilter
  grade: StringFilter
  price: DecimalFilter
  manufacturer: StringFilter
  manufacturer_address: StringFilter
  product_quantity: IntFilter
  supplier_id: IntFilter
}

input ProductUpdateManyMutationInput {
  product_name: StringFieldUpdateOperationsInput
  unit_of_measurement: StringFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  manufacturer_address: StringFieldUpdateOperationsInput
  product_quantity: IntFieldUpdateOperationsInput
}

input SupplierUpdateToOneWithWhereWithoutAccountInput {
  where: SupplierWhereInput
  data: SupplierUpdateWithoutAccountInput!
}

input CompanyUpdateOneWithoutAccountNestedInput {
  create: CompanyCreateWithoutAccountInput
  connectOrCreate: CompanyCreateOrConnectWithoutAccountInput
  upsert: CompanyUpsertWithoutAccountInput
  disconnect: CompanyWhereInput
  delete: CompanyWhereInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutAccountInput
}

input CompanyUpsertWithoutAccountInput {
  update: CompanyUpdateWithoutAccountInput!
  create: CompanyCreateWithoutAccountInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  warehouses: WarehouseUpdateManyWithoutCompanyNestedInput
  staffes: StaffUpdateManyWithoutCompanyNestedInput
  invoices: InvoiceUpdateManyWithoutCompanyNestedInput
}

input CompanyUpdateToOneWithWhereWithoutAccountInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutAccountInput!
}

input AccountUpdateToOneWithWhereWithoutClientInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutClientInput!
}

input ClientUpdateToOneWithWhereWithoutOrdersInput {
  where: ClientWhereInput
  data: ClientUpdateWithoutOrdersInput!
}

input OrderUpdateToOneWithWhereWithoutInvoicesInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutInvoicesInput!
}

input InvoiceUpdateWithWhereUniqueWithoutProductInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateWithoutProductInput!
}

input InvoiceUpdateManyWithWhereWithoutProductInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyMutationInput!
}

input ProductUpdateToOneWithWhereWithoutOrdersInput {
  where: ProductWhereInput
  data: ProductUpdateWithoutOrdersInput!
}

input OrderUpdateWithWhereUniqueWithoutClientInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutClientInput!
}

input OrderUpdateManyWithWhereWithoutClientInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyMutationInput!
}

input ClientUpdateToOneWithWhereWithoutAccountInput {
  where: ClientWhereInput
  data: ClientUpdateWithoutAccountInput!
}

input AccountUpdateToOneWithWhereWithoutSupplierInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutSupplierInput!
}

input AccountCreateInput {
  bank_name: String!
  account_number: String!
  balance: String!
  date: DateTime!
  has_credit: Boolean!
  credit_amount: Float!
  client: ClientCreateNestedOneWithoutAccountInput
  supplier: SupplierCreateNestedOneWithoutAccountInput
  company: CompanyCreateNestedOneWithoutAccountInput
}

input AccountUpdateInput {
  bank_name: StringFieldUpdateOperationsInput
  account_number: StringFieldUpdateOperationsInput
  balance: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  has_credit: BoolFieldUpdateOperationsInput
  credit_amount: FloatFieldUpdateOperationsInput
  client: ClientUpdateOneWithoutAccountNestedInput
  supplier: SupplierUpdateOneWithoutAccountNestedInput
  company: CompanyUpdateOneWithoutAccountNestedInput
}

input ProductCreateInput {
  product_name: String!
  unit_of_measurement: String!
  grade: String!
  price: Decimal!
  manufacturer: String!
  manufacturer_address: String!
  product_quantity: Int!
  supplier: SupplierCreateNestedOneWithoutProductsInput!
  invoices: InvoiceCreateNestedManyWithoutProductInput
  orders: OrderCreateNestedManyWithoutProductInput
}

input ProductUpdateInput {
  product_name: StringFieldUpdateOperationsInput
  unit_of_measurement: StringFieldUpdateOperationsInput
  grade: StringFieldUpdateOperationsInput
  price: DecimalFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  manufacturer_address: StringFieldUpdateOperationsInput
  product_quantity: IntFieldUpdateOperationsInput
  supplier: SupplierUpdateOneRequiredWithoutProductsNestedInput
  invoices: InvoiceUpdateManyWithoutProductNestedInput
  orders: OrderUpdateManyWithoutProductNestedInput
}

input ClientCreateInput {
  name: String!
  address: String!
  orders: OrderCreateNestedManyWithoutClientInput
  account: AccountCreateNestedOneWithoutClientInput
}

input ClientUpdateInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutClientNestedInput
  account: AccountUpdateOneWithoutClientNestedInput
}

input CompanyCreateInput {
  name: String!
  address: String!
  phone: String!
  account: AccountCreateNestedOneWithoutCompanyInput
  warehouses: WarehouseCreateNestedManyWithoutCompanyInput
  staffes: StaffCreateNestedManyWithoutCompanyInput
  invoices: InvoiceCreateNestedManyWithoutCompanyInput
}

input CompanyUpdateInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutCompanyNestedInput
  warehouses: WarehouseUpdateManyWithoutCompanyNestedInput
  staffes: StaffUpdateManyWithoutCompanyNestedInput
  invoices: InvoiceUpdateManyWithoutCompanyNestedInput
}

input OrderCreateInput {
  order_date: DateTime!
  product_count: Int!
  client: ClientCreateNestedOneWithoutOrdersInput!
  product: ProductCreateNestedOneWithoutOrdersInput!
  invoices: InvoiceCreateNestedManyWithoutOrderInput
  warehouse: WarehouseCreateNestedOneWithoutOrderInput!
}

input OrderUpdateInput {
  order_date: DateTimeFieldUpdateOperationsInput
  product_count: IntFieldUpdateOperationsInput
  client: ClientUpdateOneRequiredWithoutOrdersNestedInput
  product: ProductUpdateOneRequiredWithoutOrdersNestedInput
  invoices: InvoiceUpdateManyWithoutOrderNestedInput
  warehouse: WarehouseUpdateOneRequiredWithoutOrderNestedInput
}

input InvoiceCreateInput {
  total_amount: Int!
  transport_date: DateTime!
  product: ProductCreateNestedOneWithoutInvoicesInput!
  order: OrderCreateNestedOneWithoutInvoicesInput!
  company: CompanyCreateNestedOneWithoutInvoicesInput!
}

input InvoiceUpdateInput {
  total_amount: IntFieldUpdateOperationsInput
  transport_date: DateTimeFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutInvoicesNestedInput
  order: OrderUpdateOneRequiredWithoutInvoicesNestedInput
  company: CompanyUpdateOneRequiredWithoutInvoicesNestedInput
}

input WarehouseCreateInput {
  address: String!
  company: CompanyCreateNestedOneWithoutWarehousesInput!
  transports: TransportCreateNestedManyWithoutWarehouseInput
  order: OrderCreateNestedManyWithoutWarehouseInput
}

input WarehouseUpdateInput {
  address: StringFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutWarehousesNestedInput
  transports: TransportUpdateManyWithoutWarehouseNestedInput
  order: OrderUpdateManyWithoutWarehouseNestedInput
}

input StaffCreateInput {
  name: String!
  position: String!
  education: String!
  salary: Float!
  hire_date: DateTime!
  company: CompanyCreateNestedOneWithoutStaffesInput!
}

input CompanyCreateNestedOneWithoutStaffesInput {
  create: CompanyCreateWithoutStaffesInput
  connectOrCreate: CompanyCreateOrConnectWithoutStaffesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutStaffesInput {
  name: String!
  address: String!
  phone: String!
  account: AccountCreateNestedOneWithoutCompanyInput
  warehouses: WarehouseCreateNestedManyWithoutCompanyInput
  invoices: InvoiceCreateNestedManyWithoutCompanyInput
}

input CompanyCreateOrConnectWithoutStaffesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutStaffesInput!
}

input StaffUpdateInput {
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  education: StringFieldUpdateOperationsInput
  salary: FloatFieldUpdateOperationsInput
  hire_date: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutStaffesNestedInput
}

input CompanyUpdateOneRequiredWithoutStaffesNestedInput {
  create: CompanyCreateWithoutStaffesInput
  connectOrCreate: CompanyCreateOrConnectWithoutStaffesInput
  upsert: CompanyUpsertWithoutStaffesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutStaffesInput
}

input CompanyUpsertWithoutStaffesInput {
  update: CompanyUpdateWithoutStaffesInput!
  create: CompanyCreateWithoutStaffesInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutStaffesInput {
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  account: AccountUpdateOneWithoutCompanyNestedInput
  warehouses: WarehouseUpdateManyWithoutCompanyNestedInput
  invoices: InvoiceUpdateManyWithoutCompanyNestedInput
}

input CompanyUpdateToOneWithWhereWithoutStaffesInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutStaffesInput!
}

input TransportCreateInput {
  vehicle_number: String!
  vehicle_brand: String!
  load_capacity: Int!
  year_of_manufacture: Int!
  owner_name: String!
  warehouse: WarehouseCreateNestedOneWithoutTransportsInput!
}

input WarehouseCreateNestedOneWithoutTransportsInput {
  create: WarehouseCreateWithoutTransportsInput
  connectOrCreate: WarehouseCreateOrConnectWithoutTransportsInput
  connect: WarehouseWhereUniqueInput
}

input WarehouseCreateWithoutTransportsInput {
  address: String!
  company: CompanyCreateNestedOneWithoutWarehousesInput!
  order: OrderCreateNestedManyWithoutWarehouseInput
}

input WarehouseCreateOrConnectWithoutTransportsInput {
  where: WarehouseWhereUniqueInput!
  create: WarehouseCreateWithoutTransportsInput!
}

input TransportUpdateInput {
  vehicle_number: StringFieldUpdateOperationsInput
  vehicle_brand: StringFieldUpdateOperationsInput
  load_capacity: IntFieldUpdateOperationsInput
  year_of_manufacture: IntFieldUpdateOperationsInput
  owner_name: StringFieldUpdateOperationsInput
  warehouse: WarehouseUpdateOneRequiredWithoutTransportsNestedInput
}

input WarehouseUpdateOneRequiredWithoutTransportsNestedInput {
  create: WarehouseCreateWithoutTransportsInput
  connectOrCreate: WarehouseCreateOrConnectWithoutTransportsInput
  upsert: WarehouseUpsertWithoutTransportsInput
  connect: WarehouseWhereUniqueInput
  update: WarehouseUpdateToOneWithWhereWithoutTransportsInput
}

input WarehouseUpsertWithoutTransportsInput {
  update: WarehouseUpdateWithoutTransportsInput!
  create: WarehouseCreateWithoutTransportsInput!
  where: WarehouseWhereInput
}

input WarehouseUpdateWithoutTransportsInput {
  address: StringFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutWarehousesNestedInput
  order: OrderUpdateManyWithoutWarehouseNestedInput
}

input WarehouseUpdateToOneWithWhereWithoutTransportsInput {
  where: WarehouseWhereInput
  data: WarehouseUpdateWithoutTransportsInput!
}